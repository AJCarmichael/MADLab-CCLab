// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const convert = dart_sdk.convert;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const _internal = dart_sdk._internal;
  const html = dart_sdk.html;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const elevated_button_theme = flutter_sdk.src__material__elevated_button_theme;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const framework = flutter_sdk.src__widgets__framework;
  const theme = flutter_sdk.src__material__theme;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const safe_area = flutter_sdk.src__widgets__safe_area;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const image = flutter_sdk.src__widgets__image;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const container = flutter_sdk.src__widgets__container;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const progress_indicator = flutter_sdk.src__material__progress_indicator;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const message_codec = flutter_sdk.src__services__message_codec;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const span_exception = flutter_sdk.src__span_exception;
  const queue_list = flutter_sdk.src__queue_list;
  const serialization = flutter_sdk.src__foundation__serialization;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var image_picker = Object.create(dart.library);
  var http = Object.create(dart.library);
  var image_picker_for_web = Object.create(dart.library);
  var image_picker_platform_interface = Object.create(dart.library);
  var client$ = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var streamed_request = Object.create(dart.library);
  var base_client = Object.create(dart.library);
  var base_request = Object.create(dart.library);
  var base_response = Object.create(dart.library);
  var byte_stream = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var multipart_request = Object.create(dart.library);
  var streamed_response = Object.create(dart.library);
  var mime = Object.create(dart.library);
  var image_resizer = Object.create(dart.library);
  var cross_file = Object.create(dart.library);
  var image_picker_platform = Object.create(dart.library);
  var types = Object.create(dart.library);
  var browser_client = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var boundary_characters = Object.create(dart.library);
  var mime_multipart_transformer = Object.create(dart.library);
  var mime_shared = Object.create(dart.library);
  var mime_type = Object.create(dart.library);
  var image_resizer_utils = Object.create(dart.library);
  var x_file = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_image_picker = Object.create(dart.library);
  var camera_delegate = Object.create(dart.library);
  var camera_device = Object.create(dart.library);
  var image_options = Object.create(dart.library);
  var image_source = Object.create(dart.library);
  var lost_data_response = Object.create(dart.library);
  var media_options = Object.create(dart.library);
  var media_selection_type = Object.create(dart.library);
  var multi_image_picker_options = Object.create(dart.library);
  var picked_file = Object.create(dart.library);
  var retrieve_type = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var bound_multipart_stream = Object.create(dart.library);
  var char_code = Object.create(dart.library);
  var default_extension_map = Object.create(dart.library);
  var magic_number = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var lost_data = Object.create(dart.library);
  var html$0 = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var web_helpers = Object.create(dart.library);
  var base = Object.create(dart.library);
  var base$ = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $substring = dartx.substring;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $map = dartx.map;
  var $startsWith = dartx.startsWith;
  var $files = dartx.files;
  var $target = dartx.target;
  var $onChange = dartx.onChange;
  var $onError = dartx.onError;
  var $name = dartx.name;
  var $size = dartx.size;
  var $type = dartx.type;
  var $toList = dartx.toList;
  var $id = dartx.id;
  var $children = dartx.children;
  var $accept = dartx.accept;
  var $multiple = dartx.multiple;
  var $setAttribute = dartx.setAttribute;
  var $clear = dartx.clear;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $toLowerCase = dartx.toLowerCase;
  var $hashCode = dartx.hashCode;
  var $addAll = dartx.addAll;
  var $cast = dartx.cast;
  var $forEach = dartx.forEach;
  var $entries = dartx.entries;
  var $replaceAll = dartx.replaceAll;
  var $onLoad = dartx.onLoad;
  var $toDouble = dartx.toDouble;
  var $toInt = dartx.toInt;
  var $context2D = dartx.context2D;
  var $drawImageScaled = dartx.drawImageScaled;
  var $toBlob = dartx.toBlob;
  var $responseType = dartx.responseType;
  var $response = dartx.response;
  var $asUint8List = dartx.asUint8List;
  var $responseHeaders = dartx.responseHeaders;
  var $join = dartx.join;
  var $buffer = dartx.buffer;
  var $codeUnits = dartx.codeUnits;
  var $setRange = dartx.setRange;
  var $lastIndexOf = dartx.lastIndexOf;
  var $contains = dartx.contains;
  var $indexOf = dartx.indexOf;
  var $split = dartx.split;
  var $replaceAllMapped = dartx.replaceAllMapped;
  var $_equals = dartx._equals;
  var $sublist = dartx.sublist;
  var $slice = dartx.slice;
  var $onLoadEnd = dartx.onLoadEnd;
  var $result = dartx.result;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $vendor = dartx.vendor;
  var $navigator = dartx.navigator;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $isEmpty = dartx.isEmpty;
  var $elementSizeInBytes = dartx.elementSizeInBytes;
  var $offsetInBytes = dartx.offsetInBytes;
  var $insertAll = dartx.insertAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    MapNOfString$dynamic: () => (T.MapNOfString$dynamic = dart.constFn(dart.nullable(T.MapOfString$dynamic())))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    XFileN: () => (T.XFileN = dart.constFn(dart.nullable(html$.XFile)))(),
    FutureOfResponse: () => (T.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),
    ClientToFutureOfResponse: () => (T.ClientToFutureOfResponse = dart.constFn(dart.fnType(T.FutureOfResponse(), [client$.Client])))(),
    FutureOfString: () => (T.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    ClientToFutureOfString: () => (T.ClientToFutureOfString = dart.constFn(dart.fnType(T.FutureOfString(), [client$.Client])))(),
    FutureOfUint8List: () => (T.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    ClientToFutureOfUint8List: () => (T.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T.FutureOfUint8List(), [client$.Client])))(),
    FutureOfXFile: () => (T.FutureOfXFile = dart.constFn(async.Future$(html$.XFile)))(),
    XFileToFutureOfXFile: () => (T.XFileToFutureOfXFile = dart.constFn(dart.fnType(T.FutureOfXFile(), [html$.XFile])))(),
    ListOfXFile: () => (T.ListOfXFile = dart.constFn(core.List$(html$.XFile)))(),
    FileUploadInputElementN: () => (T.FileUploadInputElementN = dart.constFn(dart.nullable(html.FileUploadInputElement)))(),
    CompleterOfPickedFile: () => (T.CompleterOfPickedFile = dart.constFn(async.Completer$(html$0.PickedFile)))(),
    EventToNull: () => (T.EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))(),
    CompleterOfListOfXFile: () => (T.CompleterOfListOfXFile = dart.constFn(async.Completer$(T.ListOfXFile())))(),
    FileToXFile: () => (T.FileToXFile = dart.constFn(dart.fnType(html$.XFile, [html.File])))(),
    JSArrayOfXFile: () => (T.JSArrayOfXFile = dart.constFn(_interceptors.JSArray$(html$.XFile)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    LinkedMapOfObjectN$ObjectN: () => (T.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T.ObjectN(), T.ObjectN())))(),
    VoidToClient: () => (T.VoidToClient = dart.constFn(dart.fnType(client$.Client, [])))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    LinkedHashMapOfString$String: () => (T.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    StringAndStringTobool: () => (T.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    _EmptyStreamOfListOfint: () => (T._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T.ListOfint())))(),
    StreamControllerOfListOfint: () => (T.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T.ListOfint())))(),
    StreamOfListOfint: () => (T.StreamOfListOfint = dart.constFn(async.Stream$(T.ListOfint())))(),
    CompleterOfUint8List: () => (T.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfint()])))(),
    JSArrayOfMultipartFile: () => (T.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),
    StringAndStringTovoid: () => (T.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    _AsyncStarImplOfListOfint: () => (T._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T.ListOfint())))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    CompleterOfImageElement: () => (T.CompleterOfImageElement = dart.constFn(async.Completer$(html.ImageElement)))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    LinkedHashSetOfHttpRequest: () => (T.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfStreamedResponse: () => (T.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),
    ProgressEventToNull: () => (T.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfListOfString: () => (T.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T.ListOfString())))(),
    ListOfStringToString: () => (T.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T.ListOfString()])))(),
    JSArrayOfMagicNumber: () => (T.JSArrayOfMagicNumber = dart.constFn(_interceptors.JSArray$(magic_number.MagicNumber)))(),
    PickedFileN: () => (T.PickedFileN = dart.constFn(dart.nullable(html$0.PickedFile)))(),
    dynamicToPickedFile: () => (T.dynamicToPickedFile = dart.constFn(dart.fnType(html$0.PickedFile, [dart.dynamic])))(),
    ListOfPickedFile: () => (T.ListOfPickedFile = dart.constFn(core.List$(html$0.PickedFile)))(),
    ListNOfPickedFile: () => (T.ListNOfPickedFile = dart.constFn(dart.nullable(T.ListOfPickedFile())))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    dynamicToXFile: () => (T.dynamicToXFile = dart.constFn(dart.fnType(html$.XFile, [dart.dynamic])))(),
    ListNOfXFile: () => (T.ListNOfXFile = dart.constFn(dart.nullable(T.ListOfXFile())))(),
    ListNToListNOfXFile: () => (T.ListNToListNOfXFile = dart.constFn(dart.fnType(T.ListNOfXFile(), [T.ListN()])))(),
    UnmodifiableMapViewOfString$String: () => (T.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T.ListOfAuthenticationChallenge(), [])))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidToDateTime: () => (T.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    MatchToString: () => (T.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StreamControllerOfMimeMultipart: () => (T.StreamControllerOfMimeMultipart = dart.constFn(async.StreamController$(mime_shared.MimeMultipart)))(),
    BlobN: () => (T.BlobN = dart.constFn(dart.nullable(html.Blob)))(),
    ListOfintToString: () => (T.ListOfintToString = dart.constFn(dart.fnType(core.String, [T.ListOfint()])))(),
    _AsyncStarImplOfUint8List: () => (T._AsyncStarImplOfUint8List = dart.constFn(async._AsyncStarImpl$(typed_data.Uint8List)))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    SinkOfListOfint: () => (T.SinkOfListOfint = dart.constFn(core.Sink$(T.ListOfint())))(),
    intAndStringTovoid: () => (T.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 24,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 24
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: main.HomePage.prototype,
        [Widget_key]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 18,
        [EdgeInsets_right]: 18,
        [EdgeInsets_top]: 18,
        [EdgeInsets_left]: 18
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 24,
        [SizedBox_width]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "📷 Take Photo"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "☁️ Identify"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [_Enum__name]: "material",
        [_Enum_index]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: progress_indicator.CircularProgressIndicator.prototype,
        [Widget_key]: null,
        [ProgressIndicator_semanticsValue]: null,
        [ProgressIndicator_semanticsLabel]: null,
        [ProgressIndicator_valueColor]: null,
        [ProgressIndicator_color]: null,
        [ProgressIndicator_backgroundColor]: null,
        [ProgressIndicator_value]: null,
        [CircularProgressIndicator_strokeWidth]: 4,
        [CircularProgressIndicator__indicatorType]: C[8] || CT.C8
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: main.MyApp.prototype,
        [Widget_key]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: camera_device.CameraDevice.prototype,
        [_Enum__name]: "rear",
        [_Enum_index]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: image_options.ImagePickerOptions.prototype,
        [ImageOptions_requestFullMetadata]: true,
        [ImageOptions_imageQuality]: null,
        [ImageOptions_maxHeight]: null,
        [ImageOptions_maxWidth]: null,
        [ImagePickerOptions_preferredCameraDevice]: C[12] || CT.C12
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: image_options.ImageOptions.prototype,
        [ImageOptions_requestFullMetadata]: true,
        [ImageOptions_imageQuality]: null,
        [ImageOptions_maxHeight]: null,
        [ImageOptions_maxWidth]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: multi_image_picker_options.MultiImagePickerOptions.prototype,
        [MultiImagePickerOptions_imageOptions]: C[15] || CT.C15
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C17() {
      return C[17] = dart.const(new _js_helper.PrivateSymbol.new('_clientToken', _clientToken));
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: T._EmptyStreamOfListOfint().prototype
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: byte_stream.ByteStream.prototype,
        [StreamView__stream]: C[19] || CT.C19
      });
    },
    get C20() {
      return C[20] = dart.constMap(core.String, core.String, []);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [Utf8Codec__allowMalformed]: false
      });
    },
    get C22() {
      return C[22] = dart.constList([13, 10], core.int);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [Latin1Codec__allowInvalid]: false
      });
    },
    get C24() {
      return C[24] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[27] || CT.C27
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[26] || CT.C26,
        [MethodChannel_name]: "plugins.flutter.io/image_picker"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: camera_device.CameraDevice.prototype,
        [_Enum__name]: "front",
        [_Enum_index]: 1
      });
    },
    get C28() {
      return C[28] = dart.constList([C[12] || CT.C12, C[29] || CT.C29], camera_device.CameraDevice);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: image_source.ImageSource.prototype,
        [_Enum__name]: "camera",
        [_Enum_index]: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: image_source.ImageSource.prototype,
        [_Enum__name]: "gallery",
        [_Enum_index]: 1
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32], image_source.ImageSource);
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: media_selection_type.MediaSelectionType.prototype,
        [_Enum__name]: "image",
        [_Enum_index]: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: media_selection_type.MediaSelectionType.prototype,
        [_Enum__name]: "video",
        [_Enum_index]: 1
      });
    },
    get C33() {
      return C[33] = dart.constList([C[34] || CT.C34, C[35] || CT.C35], media_selection_type.MediaSelectionType);
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: retrieve_type.RetrieveType.prototype,
        [_Enum__name]: "image",
        [_Enum_index]: 0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: retrieve_type.RetrieveType.prototype,
        [_Enum__name]: "video",
        [_Enum_index]: 1
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: retrieve_type.RetrieveType.prototype,
        [_Enum__name]: "media",
        [_Enum_index]: 2
      });
    },
    get C36() {
      return C[36] = dart.constList([C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39], retrieve_type.RetrieveType);
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C41() {
      return C[41] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C42() {
      return C[42] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [message$0]: "Bad multipart ending"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [message$0]: "Invalid header field name"
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [message$0]: "Failed to parse multipart mime 1"
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [message$0]: "Failed to parse multipart mime 2"
      });
    },
    get C47() {
      return C[47] = dart.constSet(core.int, [40, 41, 60, 62, 64, 44, 59, 58, 92, 34, 47, 91, 93, 63, 61, 123, 125, 32, 9]);
    },
    get C48() {
      return C[48] = dart.constList([], core.int);
    },
    get C49() {
      return C[49] = dart.constMap(core.String, core.String, ["123", "application/vnd.lotus-1-2-3", "3dml", "text/vnd.in3d.3dml", "3ds", "image/x-3ds", "3g2", "video/3gpp2", "3gp", "video/3gpp", "7z", "application/x-7z-compressed", "aab", "application/x-authorware-bin", "aac", "audio/aac", "aam", "application/x-authorware-map", "aas", "application/x-authorware-seg", "abw", "application/x-abiword", "ac", "application/pkix-attr-cert", "acc", "application/vnd.americandynamics.acc", "ace", "application/x-ace-compressed", "acu", "application/vnd.acucobol", "acutc", "application/vnd.acucorp", "adp", "audio/adpcm", "aep", "application/vnd.audiograph", "afm", "application/x-font-type1", "afp", "application/vnd.ibm.modcap", "ahead", "application/vnd.ahead.space", "ai", "application/postscript", "aif", "audio/x-aiff", "aifc", "audio/x-aiff", "aiff", "audio/x-aiff", "air", "application/vnd.adobe.air-application-installer-package+zip", "ait", "application/vnd.dvb.ait", "ami", "application/vnd.amiga.ami", "apk", "application/vnd.android.package-archive", "appcache", "text/cache-manifest", "application", "application/x-ms-application", "apr", "application/vnd.lotus-approach", "arc", "application/x-freearc", "asc", "application/pgp-signature", "asf", "video/x-ms-asf", "asm", "text/x-asm", "aso", "application/vnd.accpac.simply.aso", "asx", "video/x-ms-asf", "atc", "application/vnd.acucorp", "atom", "application/atom+xml", "atomcat", "application/atomcat+xml", "atomsvc", "application/atomsvc+xml", "atx", "application/vnd.antix.game-component", "au", "audio/basic", "avi", "video/x-msvideo", "avif", "image/avif", "aw", "application/applixware", "azf", "application/vnd.airzip.filesecure.azf", "azs", "application/vnd.airzip.filesecure.azs", "azw", "application/vnd.amazon.ebook", "bat", "application/x-msdownload", "bcpio", "application/x-bcpio", "bdf", "application/x-font-bdf", "bdm", "application/vnd.syncml.dm+wbxml", "bed", "application/vnd.realvnc.bed", "bh2", "application/vnd.fujitsu.oasysprs", "bin", "application/octet-stream", "blb", "application/x-blorb", "blorb", "application/x-blorb", "bmi", "application/vnd.bmi", "bmp", "image/bmp", "book", "application/vnd.framemaker", "box", "application/vnd.previewsystems.box", "boz", "application/x-bzip2", "bpk", "application/octet-stream", "btif", "image/prs.btif", "bz", "application/x-bzip", "bz2", "application/x-bzip2", "c", "text/x-c", "c11amc", "application/vnd.cluetrust.cartomobile-config", "c11amz", "application/vnd.cluetrust.cartomobile-config-pkg", "c4d", "application/vnd.clonk.c4group", "c4f", "application/vnd.clonk.c4group", "c4g", "application/vnd.clonk.c4group", "c4p", "application/vnd.clonk.c4group", "c4u", "application/vnd.clonk.c4group", "cab", "application/vnd.ms-cab-compressed", "caf", "audio/x-caf", "cap", "application/vnd.tcpdump.pcap", "car", "application/vnd.curl.car", "cat", "application/vnd.ms-pki.seccat", "cb7", "application/x-cbr", "cba", "application/x-cbr", "cbr", "application/x-cbr", "cbt", "application/x-cbr", "cbz", "application/x-cbr", "cc", "text/x-c", "cct", "application/x-director", "ccxml", "application/ccxml+xml", "cdbcmsg", "application/vnd.contact.cmsg", "cdf", "application/x-netcdf", "cdkey", "application/vnd.mediastation.cdkey", "cdmia", "application/cdmi-capability", "cdmic", "application/cdmi-container", "cdmid", "application/cdmi-domain", "cdmio", "application/cdmi-object", "cdmiq", "application/cdmi-queue", "cdx", "chemical/x-cdx", "cdxml", "application/vnd.chemdraw+xml", "cdy", "application/vnd.cinderella", "cer", "application/pkix-cert", "cfs", "application/x-cfs-compressed", "cgm", "image/cgm", "chat", "application/x-chat", "chm", "application/vnd.ms-htmlhelp", "chrt", "application/vnd.kde.kchart", "cif", "chemical/x-cif", "cii", "application/vnd.anser-web-certificate-issue-initiation", "cil", "application/vnd.ms-artgalry", "cla", "application/vnd.claymore", "class", "application/java-vm", "clkk", "application/vnd.crick.clicker.keyboard", "clkp", "application/vnd.crick.clicker.palette", "clkt", "application/vnd.crick.clicker.template", "clkw", "application/vnd.crick.clicker.wordbank", "clkx", "application/vnd.crick.clicker", "clp", "application/x-msclip", "cmc", "application/vnd.cosmocaller", "cmdf", "chemical/x-cmdf", "cml", "chemical/x-cml", "cmp", "application/vnd.yellowriver-custom-menu", "cmx", "image/x-cmx", "cod", "application/vnd.rim.cod", "com", "application/x-msdownload", "conf", "text/plain", "cpio", "application/x-cpio", "cpp", "text/x-c", "cpt", "application/mac-compactpro", "crd", "application/x-mscardfile", "crl", "application/pkix-crl", "crt", "application/x-x509-ca-cert", "cryptonote", "application/vnd.rig.cryptonote", "csh", "application/x-csh", "csml", "chemical/x-csml", "csp", "application/vnd.commonspace", "css", "text/css", "cst", "application/x-director", "csv", "text/csv", "cu", "application/cu-seeme", "curl", "text/vnd.curl", "cww", "application/prs.cww", "cxt", "application/x-director", "cxx", "text/x-c", "dae", "model/vnd.collada+xml", "daf", "application/vnd.mobius.daf", "dart", "text/x-dart", "dataless", "application/vnd.fdsn.seed", "davmount", "application/davmount+xml", "dbk", "application/docbook+xml", "dcm", "application/dicom", "dcr", "application/x-director", "dcurl", "text/vnd.curl.dcurl", "dd2", "application/vnd.oma.dd2+xml", "ddd", "application/vnd.fujixerox.ddd", "deb", "application/x-debian-package", "def", "text/plain", "deploy", "application/octet-stream", "der", "application/x-x509-ca-cert", "dfac", "application/vnd.dreamfactory", "dgc", "application/x-dgc-compressed", "dic", "text/x-c", "dir", "application/x-director", "dis", "application/vnd.mobius.dis", "dist", "application/octet-stream", "distz", "application/octet-stream", "djv", "image/vnd.djvu", "djvu", "image/vnd.djvu", "dll", "application/x-msdownload", "dmg", "application/x-apple-diskimage", "dmp", "application/vnd.tcpdump.pcap", "dms", "application/octet-stream", "dna", "application/vnd.dna", "doc", "application/msword", "docm", "application/vnd.ms-word.document.macroenabled.12", "docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "dot", "application/msword", "dotm", "application/vnd.ms-word.template.macroenabled.12", "dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template", "dp", "application/vnd.osgi.dp", "dpg", "application/vnd.dpgraph", "dra", "audio/vnd.dra", "dsc", "text/prs.lines.tag", "dssc", "application/dssc+der", "dtb", "application/x-dtbook+xml", "dtd", "application/xml-dtd", "dts", "audio/vnd.dts", "dtshd", "audio/vnd.dts.hd", "dump", "application/octet-stream", "dvb", "video/vnd.dvb.file", "dvi", "application/x-dvi", "dwf", "model/vnd.dwf", "dwg", "image/vnd.dwg", "dxf", "image/vnd.dxf", "dxp", "application/vnd.spotfire.dxp", "dxr", "application/x-director", "ecelp4800", "audio/vnd.nuera.ecelp4800", "ecelp7470", "audio/vnd.nuera.ecelp7470", "ecelp9600", "audio/vnd.nuera.ecelp9600", "ecma", "application/ecmascript", "edm", "application/vnd.novadigm.edm", "edx", "application/vnd.novadigm.edx", "efif", "application/vnd.picsel", "ei6", "application/vnd.pg.osasli", "elc", "application/octet-stream", "emf", "application/x-msmetafile", "eml", "message/rfc822", "emma", "application/emma+xml", "emz", "application/x-msmetafile", "eol", "audio/vnd.digital-winds", "eot", "application/vnd.ms-fontobject", "eps", "application/postscript", "epub", "application/epub+zip", "es3", "application/vnd.eszigno3+xml", "esa", "application/vnd.osgi.subsystem", "esf", "application/vnd.epson.esf", "et3", "application/vnd.eszigno3+xml", "etx", "text/x-setext", "eva", "application/x-eva", "evy", "application/x-envoy", "exe", "application/x-msdownload", "exi", "application/exi", "ext", "application/vnd.novadigm.ext", "ez", "application/andrew-inset", "ez2", "application/vnd.ezpix-album", "ez3", "application/vnd.ezpix-package", "f", "text/x-fortran", "f4v", "video/x-f4v", "f77", "text/x-fortran", "f90", "text/x-fortran", "fbs", "image/vnd.fastbidsheet", "fcdt", "application/vnd.adobe.formscentral.fcdt", "fcs", "application/vnd.isac.fcs", "fdf", "application/vnd.fdf", "fe_launch", "application/vnd.denovo.fcselayout-link", "fg5", "application/vnd.fujitsu.oasysgp", "fgd", "application/x-director", "fh", "image/x-freehand", "fh4", "image/x-freehand", "fh5", "image/x-freehand", "fh7", "image/x-freehand", "fhc", "image/x-freehand", "fig", "application/x-xfig", "flac", "audio/x-flac", "fli", "video/x-fli", "flo", "application/vnd.micrografx.flo", "flv", "video/x-flv", "flw", "application/vnd.kde.kivio", "flx", "text/vnd.fmi.flexstor", "fly", "text/vnd.fly", "fm", "application/vnd.framemaker", "fnc", "application/vnd.frogans.fnc", "for", "text/x-fortran", "fpx", "image/vnd.fpx", "frame", "application/vnd.framemaker", "fsc", "application/vnd.fsc.weblaunch", "fst", "image/vnd.fst", "ftc", "application/vnd.fluxtime.clip", "fti", "application/vnd.anser-web-funds-transfer-initiation", "fvt", "video/vnd.fvt", "fxp", "application/vnd.adobe.fxp", "fxpl", "application/vnd.adobe.fxp", "fzs", "application/vnd.fuzzysheet", "g2w", "application/vnd.geoplan", "g3", "image/g3fax", "g3w", "application/vnd.geospace", "gac", "application/vnd.groove-account", "gam", "application/x-tads", "gbr", "application/rpki-ghostbusters", "gca", "application/x-gca-compressed", "gdl", "model/vnd.gdl", "geo", "application/vnd.dynageo", "gex", "application/vnd.geometry-explorer", "ggb", "application/vnd.geogebra.file", "ggt", "application/vnd.geogebra.tool", "ghf", "application/vnd.groove-help", "gif", "image/gif", "gim", "application/vnd.groove-identity-message", "glb", "model/gltf-binary", "gltf", "model/gltf+json", "gml", "application/gml+xml", "gmx", "application/vnd.gmx", "gnumeric", "application/x-gnumeric", "gph", "application/vnd.flographit", "gpx", "application/gpx+xml", "gqf", "application/vnd.grafeq", "gqs", "application/vnd.grafeq", "gram", "application/srgs", "gramps", "application/x-gramps-xml", "gre", "application/vnd.geometry-explorer", "grv", "application/vnd.groove-injector", "grxml", "application/srgs+xml", "gsf", "application/x-font-ghostscript", "gtar", "application/x-gtar", "gtm", "application/vnd.groove-tool-message", "gtw", "model/vnd.gtw", "gv", "text/vnd.graphviz", "gxf", "application/gxf", "gxt", "application/vnd.geonext", "h", "text/x-c", "h261", "video/h261", "h263", "video/h263", "h264", "video/h264", "hal", "application/vnd.hal+xml", "hbci", "application/vnd.hbci", "hdf", "application/x-hdf", "heic", "image/heic", "heif", "image/heif", "hh", "text/x-c", "hlp", "application/winhlp", "hpgl", "application/vnd.hp-hpgl", "hpid", "application/vnd.hp-hpid", "hps", "application/vnd.hp-hps", "hqx", "application/mac-binhex40", "htke", "application/vnd.kenameaapp", "htm", "text/html", "html", "text/html", "hvd", "application/vnd.yamaha.hv-dic", "hvp", "application/vnd.yamaha.hv-voice", "hvs", "application/vnd.yamaha.hv-script", "i2g", "application/vnd.intergeo", "icc", "application/vnd.iccprofile", "ice", "x-conference/x-cooltalk", "icm", "application/vnd.iccprofile", "ico", "image/x-icon", "ics", "text/calendar", "ief", "image/ief", "ifb", "text/calendar", "ifm", "application/vnd.shana.informed.formdata", "iges", "model/iges", "igl", "application/vnd.igloader", "igm", "application/vnd.insors.igm", "igs", "model/iges", "igx", "application/vnd.micrografx.igx", "iif", "application/vnd.shana.informed.interchange", "imp", "application/vnd.accpac.simply.imp", "ims", "application/vnd.ms-ims", "in", "text/plain", "ink", "application/inkml+xml", "inkml", "application/inkml+xml", "install", "application/x-install-instructions", "iota", "application/vnd.astraea-software.iota", "ipfix", "application/ipfix", "ipk", "application/vnd.shana.informed.package", "irm", "application/vnd.ibm.rights-management", "irp", "application/vnd.irepository.package+xml", "iso", "application/x-iso9660-image", "itp", "application/vnd.shana.informed.formtemplate", "ivp", "application/vnd.immervision-ivp", "ivu", "application/vnd.immervision-ivu", "jad", "text/vnd.sun.j2me.app-descriptor", "jam", "application/vnd.jam", "jar", "application/java-archive", "java", "text/x-java-source", "jisp", "application/vnd.jisp", "jlt", "application/vnd.hp-jlyt", "jnlp", "application/x-java-jnlp-file", "joda", "application/vnd.joost.joda-archive", "jpe", "image/jpeg", "jpeg", "image/jpeg", "jpg", "image/jpeg", "jpgm", "video/jpm", "jpgv", "video/jpeg", "jpm", "video/jpm", "js", "text/javascript", "json", "application/json", "jsonml", "application/jsonml+json", "kar", "audio/midi", "karbon", "application/vnd.kde.karbon", "kfo", "application/vnd.kde.kformula", "kia", "application/vnd.kidspiration", "kml", "application/vnd.google-earth.kml+xml", "kmz", "application/vnd.google-earth.kmz", "kne", "application/vnd.kinar", "knp", "application/vnd.kinar", "kon", "application/vnd.kde.kontour", "kpr", "application/vnd.kde.kpresenter", "kpt", "application/vnd.kde.kpresenter", "kpxx", "application/vnd.ds-keypoint", "ksp", "application/vnd.kde.kspread", "ktr", "application/vnd.kahootz", "ktx", "image/ktx", "ktz", "application/vnd.kahootz", "kwd", "application/vnd.kde.kword", "kwt", "application/vnd.kde.kword", "lasxml", "application/vnd.las.las+xml", "latex", "application/x-latex", "lbd", "application/vnd.llamagraphics.life-balance.desktop", "lbe", "application/vnd.llamagraphics.life-balance.exchange+xml", "les", "application/vnd.hhe.lesson-player", "lha", "application/x-lzh-compressed", "link66", "application/vnd.route66.link66+xml", "list", "text/plain", "list3820", "application/vnd.ibm.modcap", "listafp", "application/vnd.ibm.modcap", "lnk", "application/x-ms-shortcut", "log", "text/plain", "lostxml", "application/lost+xml", "lrf", "application/octet-stream", "lrm", "application/vnd.ms-lrm", "ltf", "application/vnd.frogans.ltf", "lvp", "audio/vnd.lucent.voice", "lwp", "application/vnd.lotus-wordpro", "lzh", "application/x-lzh-compressed", "m13", "application/x-msmediaview", "m14", "application/x-msmediaview", "m1v", "video/mpeg", "m21", "application/mp21", "m2a", "audio/mpeg", "m2v", "video/mpeg", "m3a", "audio/mpeg", "m3u", "audio/x-mpegurl", "m3u8", "application/vnd.apple.mpegurl", "m4a", "audio/mp4", "m4u", "video/vnd.mpegurl", "m4v", "video/x-m4v", "ma", "application/mathematica", "mads", "application/mads+xml", "mag", "application/vnd.ecowin.chart", "maker", "application/vnd.framemaker", "man", "text/troff", "mar", "application/octet-stream", "mathml", "application/mathml+xml", "mb", "application/mathematica", "mbk", "application/vnd.mobius.mbk", "mbox", "application/mbox", "mc1", "application/vnd.medcalcdata", "mcd", "application/vnd.mcd", "mcurl", "text/vnd.curl.mcurl", "mdb", "application/x-msaccess", "mdi", "image/vnd.ms-modi", "me", "text/troff", "mesh", "model/mesh", "meta4", "application/metalink4+xml", "metalink", "application/metalink+xml", "mets", "application/mets+xml", "mfm", "application/vnd.mfmp", "mft", "application/rpki-manifest", "mgp", "application/vnd.osgeo.mapguide.package", "mgz", "application/vnd.proteus.magazine", "mid", "audio/midi", "midi", "audio/midi", "mie", "application/x-mie", "mif", "application/vnd.mif", "mime", "message/rfc822", "mj2", "video/mj2", "mjp2", "video/mj2", "mjs", "text/javascript", "mk3d", "video/x-matroska", "mka", "audio/x-matroska", "mks", "video/x-matroska", "mkv", "video/x-matroska", "mlp", "application/vnd.dolby.mlp", "mmd", "application/vnd.chipnuts.karaoke-mmd", "mmf", "application/vnd.smaf", "mmr", "image/vnd.fujixerox.edmics-mmr", "mng", "video/x-mng", "mny", "application/x-msmoney", "mobi", "application/x-mobipocket-ebook", "mods", "application/mods+xml", "mov", "video/quicktime", "movie", "video/x-sgi-movie", "mp2", "audio/mpeg", "mp21", "application/mp21", "mp2a", "audio/mpeg", "mp3", "audio/mpeg", "mp4", "video/mp4", "mp4a", "audio/mp4", "mp4s", "application/mp4", "mp4v", "video/mp4", "mpc", "application/vnd.mophun.certificate", "mpe", "video/mpeg", "mpeg", "video/mpeg", "mpg", "video/mpeg", "mpg4", "video/mp4", "mpga", "audio/mpeg", "mpkg", "application/vnd.apple.installer+xml", "mpm", "application/vnd.blueice.multipass", "mpn", "application/vnd.mophun.application", "mpp", "application/vnd.ms-project", "mpt", "application/vnd.ms-project", "mpy", "application/vnd.ibm.minipay", "mqy", "application/vnd.mobius.mqy", "mrc", "application/marc", "mrcx", "application/marcxml+xml", "ms", "text/troff", "mscml", "application/mediaservercontrol+xml", "mseed", "application/vnd.fdsn.mseed", "mseq", "application/vnd.mseq", "msf", "application/vnd.epson.msf", "msh", "model/mesh", "msi", "application/x-msdownload", "msl", "application/vnd.mobius.msl", "msty", "application/vnd.muvee.style", "mts", "model/vnd.mts", "mus", "application/vnd.musician", "musicxml", "application/vnd.recordare.musicxml+xml", "mvb", "application/x-msmediaview", "mwf", "application/vnd.mfer", "mxf", "application/mxf", "mxl", "application/vnd.recordare.musicxml", "mxml", "application/xv+xml", "mxs", "application/vnd.triscape.mxs", "mxu", "video/vnd.mpegurl", "n-gage", "application/vnd.nokia.n-gage.symbian.install", "n3", "text/n3", "nb", "application/mathematica", "nbp", "application/vnd.wolfram.player", "nc", "application/x-netcdf", "ncx", "application/x-dtbncx+xml", "nfo", "text/x-nfo", "ngdat", "application/vnd.nokia.n-gage.data", "nitf", "application/vnd.nitf", "nlu", "application/vnd.neurolanguage.nlu", "nml", "application/vnd.enliven", "nnd", "application/vnd.noblenet-directory", "nns", "application/vnd.noblenet-sealer", "nnw", "application/vnd.noblenet-web", "npx", "image/vnd.net-fpx", "nsc", "application/x-conference", "nsf", "application/vnd.lotus-notes", "ntf", "application/vnd.nitf", "nzb", "application/x-nzb", "oa2", "application/vnd.fujitsu.oasys2", "oa3", "application/vnd.fujitsu.oasys3", "oas", "application/vnd.fujitsu.oasys", "obd", "application/x-msbinder", "obj", "application/x-tgif", "oda", "application/oda", "odb", "application/vnd.oasis.opendocument.database", "odc", "application/vnd.oasis.opendocument.chart", "odf", "application/vnd.oasis.opendocument.formula", "odft", "application/vnd.oasis.opendocument.formula-template", "odg", "application/vnd.oasis.opendocument.graphics", "odi", "application/vnd.oasis.opendocument.image", "odm", "application/vnd.oasis.opendocument.text-master", "odp", "application/vnd.oasis.opendocument.presentation", "ods", "application/vnd.oasis.opendocument.spreadsheet", "odt", "application/vnd.oasis.opendocument.text", "oga", "audio/ogg", "ogg", "audio/ogg", "ogv", "video/ogg", "ogx", "application/ogg", "omdoc", "application/omdoc+xml", "onepkg", "application/onenote", "onetmp", "application/onenote", "onetoc", "application/onenote", "onetoc2", "application/onenote", "opf", "application/oebps-package+xml", "opml", "text/x-opml", "oprc", "application/vnd.palm", "org", "application/vnd.lotus-organizer", "osf", "application/vnd.yamaha.openscoreformat", "osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml", "otc", "application/vnd.oasis.opendocument.chart-template", "otf", "application/x-font-otf", "otg", "application/vnd.oasis.opendocument.graphics-template", "oth", "application/vnd.oasis.opendocument.text-web", "oti", "application/vnd.oasis.opendocument.image-template", "otp", "application/vnd.oasis.opendocument.presentation-template", "ots", "application/vnd.oasis.opendocument.spreadsheet-template", "ott", "application/vnd.oasis.opendocument.text-template", "oxps", "application/oxps", "oxt", "application/vnd.openofficeorg.extension", "p", "text/x-pascal", "p10", "application/pkcs10", "p12", "application/x-pkcs12", "p7b", "application/x-pkcs7-certificates", "p7c", "application/pkcs7-mime", "p7m", "application/pkcs7-mime", "p7r", "application/x-pkcs7-certreqresp", "p7s", "application/pkcs7-signature", "p8", "application/pkcs8", "pas", "text/x-pascal", "paw", "application/vnd.pawaafile", "pbd", "application/vnd.powerbuilder6", "pbm", "image/x-portable-bitmap", "pcap", "application/vnd.tcpdump.pcap", "pcf", "application/x-font-pcf", "pcl", "application/vnd.hp-pcl", "pclxl", "application/vnd.hp-pclxl", "pct", "image/x-pict", "pcurl", "application/vnd.curl.pcurl", "pcx", "image/x-pcx", "pdb", "application/vnd.palm", "pdf", "application/pdf", "pfa", "application/x-font-type1", "pfb", "application/x-font-type1", "pfm", "application/x-font-type1", "pfr", "application/font-tdpfr", "pfx", "application/x-pkcs12", "pgm", "image/x-portable-graymap", "pgn", "application/x-chess-pgn", "pgp", "application/pgp-encrypted", "pic", "image/x-pict", "pkg", "application/octet-stream", "pki", "application/pkixcmp", "pkipath", "application/pkix-pkipath", "plb", "application/vnd.3gpp.pic-bw-large", "plc", "application/vnd.mobius.plc", "plf", "application/vnd.pocketlearn", "pls", "application/pls+xml", "pml", "application/vnd.ctc-posml", "png", "image/png", "pnm", "image/x-portable-anymap", "portpkg", "application/vnd.macports.portpkg", "pot", "application/vnd.ms-powerpoint", "potm", "application/vnd.ms-powerpoint.template.macroenabled.12", "potx", "application/vnd.openxmlformats-officedocument.presentationml.template", "ppam", "application/vnd.ms-powerpoint.addin.macroenabled.12", "ppd", "application/vnd.cups-ppd", "ppm", "image/x-portable-pixmap", "pps", "application/vnd.ms-powerpoint", "ppsm", "application/vnd.ms-powerpoint.slideshow.macroenabled.12", "ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow", "ppt", "application/vnd.ms-powerpoint", "pptm", "application/vnd.ms-powerpoint.presentation.macroenabled.12", "pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "pqa", "application/vnd.palm", "prc", "application/x-mobipocket-ebook", "pre", "application/vnd.lotus-freelance", "prf", "application/pics-rules", "ps", "application/postscript", "psb", "application/vnd.3gpp.pic-bw-small", "psd", "image/vnd.adobe.photoshop", "psf", "application/x-font-linux-psf", "pskcxml", "application/pskc+xml", "ptid", "application/vnd.pvi.ptid1", "pub", "application/x-mspublisher", "pvb", "application/vnd.3gpp.pic-bw-var", "pwn", "application/vnd.3m.post-it-notes", "pya", "audio/vnd.ms-playready.media.pya", "pyv", "video/vnd.ms-playready.media.pyv", "qam", "application/vnd.epson.quickanime", "qbo", "application/vnd.intu.qbo", "qfx", "application/vnd.intu.qfx", "qps", "application/vnd.publishare-delta-tree", "qt", "video/quicktime", "qwd", "application/vnd.quark.quarkxpress", "qwt", "application/vnd.quark.quarkxpress", "qxb", "application/vnd.quark.quarkxpress", "qxd", "application/vnd.quark.quarkxpress", "qxl", "application/vnd.quark.quarkxpress", "qxt", "application/vnd.quark.quarkxpress", "ra", "audio/x-pn-realaudio", "ram", "audio/x-pn-realaudio", "rar", "application/x-rar-compressed", "ras", "image/x-cmu-raster", "rcprofile", "application/vnd.ipunplugged.rcprofile", "rdf", "application/rdf+xml", "rdz", "application/vnd.data-vision.rdz", "rep", "application/vnd.businessobjects", "res", "application/x-dtbresource+xml", "rgb", "image/x-rgb", "rif", "application/reginfo+xml", "rip", "audio/vnd.rip", "ris", "application/x-research-info-systems", "rl", "application/resource-lists+xml", "rlc", "image/vnd.fujixerox.edmics-rlc", "rld", "application/resource-lists-diff+xml", "rm", "application/vnd.rn-realmedia", "rmi", "audio/midi", "rmp", "audio/x-pn-realaudio-plugin", "rms", "application/vnd.jcp.javame.midlet-rms", "rmvb", "application/vnd.rn-realmedia-vbr", "rnc", "application/relax-ng-compact-syntax", "roa", "application/rpki-roa", "roff", "text/troff", "rp9", "application/vnd.cloanto.rp9", "rpss", "application/vnd.nokia.radio-presets", "rpst", "application/vnd.nokia.radio-preset", "rq", "application/sparql-query", "rs", "application/rls-services+xml", "rsd", "application/rsd+xml", "rss", "application/rss+xml", "rtf", "application/rtf", "rtx", "text/richtext", "s", "text/x-asm", "s3m", "audio/s3m", "saf", "application/vnd.yamaha.smaf-audio", "sbml", "application/sbml+xml", "sc", "application/vnd.ibm.secure-container", "scd", "application/x-msschedule", "scm", "application/vnd.lotus-screencam", "scq", "application/scvp-cv-request", "scs", "application/scvp-cv-response", "scurl", "text/vnd.curl.scurl", "sda", "application/vnd.stardivision.draw", "sdc", "application/vnd.stardivision.calc", "sdd", "application/vnd.stardivision.impress", "sdkd", "application/vnd.solent.sdkm+xml", "sdkm", "application/vnd.solent.sdkm+xml", "sdp", "application/sdp", "sdw", "application/vnd.stardivision.writer", "see", "application/vnd.seemail", "seed", "application/vnd.fdsn.seed", "sema", "application/vnd.sema", "semd", "application/vnd.semd", "semf", "application/vnd.semf", "ser", "application/java-serialized-object", "setpay", "application/set-payment-initiation", "setreg", "application/set-registration-initiation", "sfd-hdstx", "application/vnd.hydrostatix.sof-data", "sfs", "application/vnd.spotfire.sfs", "sfv", "text/x-sfv", "sgi", "image/sgi", "sgl", "application/vnd.stardivision.writer-global", "sgm", "text/sgml", "sgml", "text/sgml", "sh", "application/x-sh", "shar", "application/x-shar", "shf", "application/shf+xml", "sid", "image/x-mrsid-image", "sig", "application/pgp-signature", "sil", "audio/silk", "silo", "model/mesh", "sis", "application/vnd.symbian.install", "sisx", "application/vnd.symbian.install", "sit", "application/x-stuffit", "sitx", "application/x-stuffitx", "skd", "application/vnd.koan", "skm", "application/vnd.koan", "skp", "application/vnd.koan", "skt", "application/vnd.koan", "sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12", "sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide", "slt", "application/vnd.epson.salt", "sm", "application/vnd.stepmania.stepchart", "smf", "application/vnd.stardivision.math", "smi", "application/smil+xml", "smil", "application/smil+xml", "smv", "video/x-smv", "smzip", "application/vnd.stepmania.package", "snd", "audio/basic", "snf", "application/x-font-snf", "so", "application/octet-stream", "spc", "application/x-pkcs7-certificates", "spf", "application/vnd.yamaha.smaf-phrase", "spl", "application/x-futuresplash", "spot", "text/vnd.in3d.spot", "spp", "application/scvp-vp-response", "spq", "application/scvp-vp-request", "spx", "audio/ogg", "sql", "application/x-sql", "src", "application/x-wais-source", "srt", "application/x-subrip", "sru", "application/sru+xml", "srx", "application/sparql-results+xml", "ssdl", "application/ssdl+xml", "sse", "application/vnd.kodak-descriptor", "ssf", "application/vnd.epson.ssf", "ssml", "application/ssml+xml", "st", "application/vnd.sailingtracker.track", "stc", "application/vnd.sun.xml.calc.template", "std", "application/vnd.sun.xml.draw.template", "stf", "application/vnd.wt.stf", "sti", "application/vnd.sun.xml.impress.template", "stk", "application/hyperstudio", "stl", "application/vnd.ms-pki.stl", "str", "application/vnd.pg.format", "stw", "application/vnd.sun.xml.writer.template", "sub", "text/vnd.dvb.subtitle", "sus", "application/vnd.sus-calendar", "susp", "application/vnd.sus-calendar", "sv4cpio", "application/x-sv4cpio", "sv4crc", "application/x-sv4crc", "svc", "application/vnd.dvb.service", "svd", "application/vnd.svd", "svg", "image/svg+xml", "svgz", "image/svg+xml", "swa", "application/x-director", "swf", "application/x-shockwave-flash", "swi", "application/vnd.aristanetworks.swi", "sxc", "application/vnd.sun.xml.calc", "sxd", "application/vnd.sun.xml.draw", "sxg", "application/vnd.sun.xml.writer.global", "sxi", "application/vnd.sun.xml.impress", "sxm", "application/vnd.sun.xml.math", "sxw", "application/vnd.sun.xml.writer", "t", "text/troff", "t3", "application/x-t3vm-image", "taglet", "application/vnd.mynfc", "tao", "application/vnd.tao.intent-module-archive", "tar", "application/x-tar", "tcap", "application/vnd.3gpp2.tcap", "tcl", "application/x-tcl", "teacher", "application/vnd.smart.teacher", "tei", "application/tei+xml", "teicorpus", "application/tei+xml", "tex", "application/x-tex", "texi", "application/x-texinfo", "texinfo", "application/x-texinfo", "text", "text/plain", "tfi", "application/thraud+xml", "tfm", "application/x-tex-tfm", "tga", "image/x-tga", "thmx", "application/vnd.ms-officetheme", "tif", "image/tiff", "tiff", "image/tiff", "tmo", "application/vnd.tmobile-livetv", "toml", "application/toml", "torrent", "application/x-bittorrent", "tpl", "application/vnd.groove-tool-template", "tpt", "application/vnd.trid.tpt", "tr", "text/troff", "tra", "application/vnd.trueapp", "trm", "application/x-msterminal", "tsd", "application/timestamped-data", "tsv", "text/tab-separated-values", "ttc", "application/x-font-ttf", "ttf", "application/x-font-ttf", "ttl", "text/turtle", "twd", "application/vnd.simtech-mindmapper", "twds", "application/vnd.simtech-mindmapper", "txd", "application/vnd.genomatix.tuxedo", "txf", "application/vnd.mobius.txf", "txt", "text/plain", "u32", "application/x-authorware-bin", "udeb", "application/x-debian-package", "ufd", "application/vnd.ufdl", "ufdl", "application/vnd.ufdl", "ulx", "application/x-glulx", "umj", "application/vnd.umajin", "unityweb", "application/vnd.unity", "uoml", "application/vnd.uoml+xml", "uri", "text/uri-list", "uris", "text/uri-list", "urls", "text/uri-list", "ustar", "application/x-ustar", "utz", "application/vnd.uiq.theme", "uu", "text/x-uuencode", "uva", "audio/vnd.dece.audio", "uvd", "application/vnd.dece.data", "uvf", "application/vnd.dece.data", "uvg", "image/vnd.dece.graphic", "uvh", "video/vnd.dece.hd", "uvi", "image/vnd.dece.graphic", "uvm", "video/vnd.dece.mobile", "uvp", "video/vnd.dece.pd", "uvs", "video/vnd.dece.sd", "uvt", "application/vnd.dece.ttml+xml", "uvu", "video/vnd.uvvu.mp4", "uvv", "video/vnd.dece.video", "uvva", "audio/vnd.dece.audio", "uvvd", "application/vnd.dece.data", "uvvf", "application/vnd.dece.data", "uvvg", "image/vnd.dece.graphic", "uvvh", "video/vnd.dece.hd", "uvvi", "image/vnd.dece.graphic", "uvvm", "video/vnd.dece.mobile", "uvvp", "video/vnd.dece.pd", "uvvs", "video/vnd.dece.sd", "uvvt", "application/vnd.dece.ttml+xml", "uvvu", "video/vnd.uvvu.mp4", "uvvv", "video/vnd.dece.video", "uvvx", "application/vnd.dece.unspecified", "uvvz", "application/vnd.dece.zip", "uvx", "application/vnd.dece.unspecified", "uvz", "application/vnd.dece.zip", "vcard", "text/vcard", "vcd", "application/x-cdlink", "vcf", "text/x-vcard", "vcg", "application/vnd.groove-vcard", "vcs", "text/x-vcalendar", "vcx", "application/vnd.vcx", "vis", "application/vnd.visionary", "viv", "video/vnd.vivo", "vob", "video/x-ms-vob", "vor", "application/vnd.stardivision.writer", "vox", "application/x-authorware-bin", "vrml", "model/vrml", "vsd", "application/vnd.visio", "vsf", "application/vnd.vsf", "vss", "application/vnd.visio", "vst", "application/vnd.visio", "vsw", "application/vnd.visio", "vtu", "model/vnd.vtu", "vxml", "application/voicexml+xml", "w3d", "application/x-director", "wad", "application/x-doom", "wasm", "application/wasm", "wav", "audio/x-wav", "wax", "audio/x-ms-wax", "wbmp", "image/vnd.wap.wbmp", "wbs", "application/vnd.criticaltools.wbs+xml", "wbxml", "application/vnd.wap.wbxml", "wcm", "application/vnd.ms-works", "wdb", "application/vnd.ms-works", "wdp", "image/vnd.ms-photo", "weba", "audio/webm", "webm", "video/webm", "webmanifest", "application/manifest+json", "webp", "image/webp", "wg", "application/vnd.pmi.widget", "wgt", "application/widget", "wks", "application/vnd.ms-works", "wm", "video/x-ms-wm", "wma", "audio/x-ms-wma", "wmd", "application/x-ms-wmd", "wmf", "application/x-msmetafile", "wml", "text/vnd.wap.wml", "wmlc", "application/vnd.wap.wmlc", "wmls", "text/vnd.wap.wmlscript", "wmlsc", "application/vnd.wap.wmlscriptc", "wmv", "video/x-ms-wmv", "wmx", "video/x-ms-wmx", "wmz", "application/x-ms-wmz", "woff", "application/x-font-woff", "woff2", "font/woff2", "wpd", "application/vnd.wordperfect", "wpl", "application/vnd.ms-wpl", "wps", "application/vnd.ms-works", "wqd", "application/vnd.wqd", "wri", "application/x-mswrite", "wrl", "model/vrml", "wsdl", "application/wsdl+xml", "wspolicy", "application/wspolicy+xml", "wtb", "application/vnd.webturbo", "wvx", "video/x-ms-wvx", "x32", "application/x-authorware-bin", "x3d", "model/x3d+xml", "x3db", "model/x3d+binary", "x3dbz", "model/x3d+binary", "x3dv", "model/x3d+vrml", "x3dvz", "model/x3d+vrml", "x3dz", "model/x3d+xml", "xaml", "application/xaml+xml", "xap", "application/x-silverlight-app", "xar", "application/vnd.xara", "xbap", "application/x-ms-xbap", "xbd", "application/vnd.fujixerox.docuworks.binder", "xbm", "image/x-xbitmap", "xdf", "application/xcap-diff+xml", "xdm", "application/vnd.syncml.dm+xml", "xdp", "application/vnd.adobe.xdp+xml", "xdssc", "application/dssc+xml", "xdw", "application/vnd.fujixerox.docuworks", "xenc", "application/xenc+xml", "xer", "application/patch-ops-error+xml", "xfdf", "application/vnd.adobe.xfdf", "xfdl", "application/vnd.xfdl", "xht", "application/xhtml+xml", "xhtml", "application/xhtml+xml", "xhvml", "application/xv+xml", "xif", "image/vnd.xiff", "xla", "application/vnd.ms-excel", "xlam", "application/vnd.ms-excel.addin.macroenabled.12", "xlc", "application/vnd.ms-excel", "xlf", "application/x-xliff+xml", "xlm", "application/vnd.ms-excel", "xls", "application/vnd.ms-excel", "xlsb", "application/vnd.ms-excel.sheet.binary.macroenabled.12", "xlsm", "application/vnd.ms-excel.sheet.macroenabled.12", "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "xlt", "application/vnd.ms-excel", "xltm", "application/vnd.ms-excel.template.macroenabled.12", "xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template", "xlw", "application/vnd.ms-excel", "xm", "audio/xm", "xml", "application/xml", "xo", "application/vnd.olpc-sugar", "xop", "application/xop+xml", "xpi", "application/x-xpinstall", "xpl", "application/xproc+xml", "xpm", "image/x-xpixmap", "xpr", "application/vnd.is-xpr", "xps", "application/vnd.ms-xpsdocument", "xpw", "application/vnd.intercon.formnet", "xpx", "application/vnd.intercon.formnet", "xsl", "application/xml", "xslt", "application/xslt+xml", "xsm", "application/vnd.syncml+xml", "xspf", "application/xspf+xml", "xul", "application/vnd.mozilla.xul+xml", "xvm", "application/xv+xml", "xvml", "application/xv+xml", "xwd", "image/x-xwindowdump", "xyz", "chemical/x-xyz", "xz", "application/x-xz", "yang", "application/yang", "yin", "application/yin+xml", "z1", "application/x-zmachine", "z2", "application/x-zmachine", "z3", "application/x-zmachine", "z4", "application/x-zmachine", "z5", "application/x-zmachine", "z6", "application/x-zmachine", "z7", "application/x-zmachine", "z8", "application/x-zmachine", "zaz", "application/vnd.zzazz.deck+xml", "zip", "application/zip", "zir", "application/vnd.zul", "zirz", "application/vnd.zul", "zmm", "application/vnd.handheld-entertainment+xml"]);
    },
    get C52() {
      return C[52] = dart.constList([37, 80, 68, 70], core.int);
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[52] || CT.C52,
        [mimeType$]: "application/pdf"
      });
    },
    get C54() {
      return C[54] = dart.constList([37, 81], core.int);
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[54] || CT.C54,
        [mimeType$]: "application/postscript"
      });
    },
    get C56() {
      return C[56] = dart.constList([255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255], core.int);
    },
    get C57() {
      return C[57] = dart.constList([70, 79, 82, 77, 0, 0, 0, 0, 65, 73, 70, 70], core.int);
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: C[56] || CT.C56,
        [numbers$]: C[57] || CT.C57,
        [mimeType$]: "audio/x-aiff"
      });
    },
    get C59() {
      return C[59] = dart.constList([102, 76, 97, 67], core.int);
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[59] || CT.C59,
        [mimeType$]: "audio/x-flac"
      });
    },
    get C61() {
      return C[61] = dart.constList([82, 73, 70, 70, 0, 0, 0, 0, 87, 65, 86, 69], core.int);
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: C[56] || CT.C56,
        [numbers$]: C[61] || CT.C61,
        [mimeType$]: "audio/x-wav"
      });
    },
    get C63() {
      return C[63] = dart.constList([71, 73, 70, 56, 55, 97], core.int);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[63] || CT.C63,
        [mimeType$]: "image/gif"
      });
    },
    get C65() {
      return C[65] = dart.constList([71, 73, 70, 56, 57, 97], core.int);
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[65] || CT.C65,
        [mimeType$]: "image/gif"
      });
    },
    get C67() {
      return C[67] = dart.constList([255, 216], core.int);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[67] || CT.C67,
        [mimeType$]: "image/jpeg"
      });
    },
    get C69() {
      return C[69] = dart.constList([137, 80, 78, 71, 13, 10, 26, 10], core.int);
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[69] || CT.C69,
        [mimeType$]: "image/png"
      });
    },
    get C71() {
      return C[71] = dart.constList([73, 73, 42, 0], core.int);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[71] || CT.C71,
        [mimeType$]: "image/tiff"
      });
    },
    get C73() {
      return C[73] = dart.constList([77, 77, 0, 42], core.int);
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[73] || CT.C73,
        [mimeType$]: "image/tiff"
      });
    },
    get C75() {
      return C[75] = dart.constList([255, 241], core.int);
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[75] || CT.C75,
        [mimeType$]: "audio/aac"
      });
    },
    get C77() {
      return C[77] = dart.constList([255, 249], core.int);
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[77] || CT.C77,
        [mimeType$]: "audio/aac"
      });
    },
    get C79() {
      return C[79] = dart.constList([26, 69, 223, 163], core.int);
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[79] || CT.C79,
        [mimeType$]: "audio/weba"
      });
    },
    get C81() {
      return C[81] = dart.constList([73, 68, 51], core.int);
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[81] || CT.C81,
        [mimeType$]: "audio/mpeg"
      });
    },
    get C83() {
      return C[83] = dart.constList([255, 251], core.int);
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[83] || CT.C83,
        [mimeType$]: "audio/mpeg"
      });
    },
    get C85() {
      return C[85] = dart.constList([79, 112, 117], core.int);
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[85] || CT.C85,
        [mimeType$]: "audio/ogg"
      });
    },
    get C87() {
      return C[87] = dart.constList([255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255], core.int);
    },
    get C88() {
      return C[88] = dart.constList([0, 0, 0, 0, 102, 116, 121, 112, 51, 103, 112, 53], core.int);
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: C[87] || CT.C87,
        [numbers$]: C[88] || CT.C88,
        [mimeType$]: "video/mp4"
      });
    },
    get C90() {
      return C[90] = dart.constList([70, 84, 108, 103], core.int);
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[90] || CT.C90,
        [mimeType$]: "model/gltf-binary"
      });
    },
    get C92() {
      return C[92] = dart.constList([82, 73, 70, 70, 0, 0, 0, 0, 87, 69, 66, 80], core.int);
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: C[56] || CT.C56,
        [numbers$]: C[92] || CT.C92,
        [mimeType$]: "image/webp"
      });
    },
    get C94() {
      return C[94] = dart.constList([119, 79, 70, 50], core.int);
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [mask$]: null,
        [numbers$]: C[94] || CT.C94,
        [mimeType$]: "font/woff2"
      });
    },
    get C50() {
      return C[50] = dart.constList([C[51] || CT.C51, C[53] || CT.C53, C[55] || CT.C55, C[58] || CT.C58, C[60] || CT.C60, C[62] || CT.C62, C[64] || CT.C64, C[66] || CT.C66, C[68] || CT.C68, C[70] || CT.C70, C[72] || CT.C72, C[74] || CT.C74, C[76] || CT.C76, C[78] || CT.C78, C[80] || CT.C80, C[82] || CT.C82, C[84] || CT.C84, C[86] || CT.C86, C[89] || CT.C89, C[91] || CT.C91, C[93] || CT.C93], magic_number.MagicNumber);
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "boundary"
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size"
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size before LF"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body"
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before CR"
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before LF"
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before CR"
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before LF"
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end"
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C106() {
      return C[106] = dart.const(new _js_helper.PrivateSymbol.new('_add', _add));
    },
    get C107() {
      return C[107] = dart.const(new _js_helper.PrivateSymbol.new('_head', _head$));
    },
    get C108() {
      return C[108] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', _writeToList));
    },
    get C109() {
      return C[109] = dart.const(new _js_helper.PrivateSymbol.new('_grow', _grow));
    },
    get C110() {
      return C[110] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', _preGrow));
    },
    get C111() {
      return C[111] = dart.const(new _js_helper.PrivateSymbol.new('_table', _table$));
    },
    get C112() {
      return C[112] = dart.const(new _js_helper.PrivateSymbol.new('_tail', _tail$));
    },
    get C113() {
      return C[113] = dart.const(new _js_helper.PrivateSymbol.new('_head=', _head_));
    },
    get C114() {
      return C[114] = dart.const(new _js_helper.PrivateSymbol.new('_table=', _table_));
    },
    get C115() {
      return C[115] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', _tail_));
    }
  }, false);
  var C = Array(116).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:image_picker/image_picker.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:image_picker_platform_interface/src/platform_interface/image_picker_platform.dart",
    "package:image_picker_for_web/image_picker_for_web.dart",
    "package:http/src/client.dart",
    "package:http/src/exception.dart",
    "package:http/src/base_request.dart",
    "package:http/src/request.dart",
    "package:http/src/base_response.dart",
    "package:http/src/response.dart",
    "package:http/src/streamed_request.dart",
    "package:http/src/base_client.dart",
    "package:http/src/byte_stream.dart",
    "package:http/src/multipart_file.dart",
    "package:http/src/multipart_request.dart",
    "package:http/src/streamed_response.dart",
    "package:image_picker_for_web/src/image_resizer.dart",
    "package:http/src/browser_client.dart",
    "package:mime/src/mime_shared.dart",
    "package:mime/src/mime_multipart_transformer.dart",
    "package:mime/src/mime_type.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/method_channel/method_channel_image_picker.dart",
    "package:image_picker_platform_interface/src/method_channel/method_channel_image_picker.dart",
    "package:image_picker_platform_interface/src/types/camera_delegate.dart",
    "package:image_picker_platform_interface/src/types/camera_device.dart",
    "package:image_picker_platform_interface/src/types/image_options.dart",
    "package:image_picker_platform_interface/src/types/image_source.dart",
    "package:image_picker_platform_interface/src/types/lost_data_response.dart",
    "package:image_picker_platform_interface/src/types/media_options.dart",
    "package:image_picker_platform_interface/src/types/media_selection_type.dart",
    "package:image_picker_platform_interface/src/types/multi_image_picker_options.dart",
    "package:image_picker_platform_interface/src/types/retrieve_type.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:mime/src/bound_multipart_stream.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/bound_multipart_stream.dart",
    "package:mime/src/magic_number.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cross_file-0.3.3+6/lib/src/types/html.dart",
    "package:cross_file/src/types/base.dart",
    "package:cross_file/src/types/html.dart",
    "package:image_picker_platform_interface/src/types/picked_file/lost_data.dart",
    "package:image_picker_platform_interface/src/types/picked_file/base.dart",
    "package:image_picker_platform_interface/src/types/picked_file/html.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:typed_data/src/typed_buffer.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var Widget_key = dart.privateName(framework, "Widget.key");
  main.MyApp = class MyApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MyApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "ApplianceID", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({brightness: ui.Brightness.dark, scaffoldBackgroundColor: colors.Colors.black, primaryColor: colors.Colors.white, textTheme: theme_data.ThemeData.dark().textTheme.apply({fontFamily: "CustomFont", bodyColor: colors.Colors.white, displayColor: colors.Colors.white}), elevatedButtonTheme: new elevated_button_theme.ElevatedButtonThemeData.new({style: elevated_button.ElevatedButton.styleFrom({backgroundColor: colors.Colors.grey.shade900, foregroundColor: colors.Colors.white, padding: C[1] || CT.C1, shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(14)})})})}), home: C[2] || CT.C2});
    }
  };
  (main.MyApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.HomePage = class HomePage extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.HomePage.new({key: key});
    }
    createState() {
      return new main._HomePageState.new();
    }
  };
  (main.HomePage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.HomePage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.HomePage.prototype;
  dart.addTypeTests(main.HomePage);
  dart.addTypeCaches(main.HomePage);
  dart.setMethodSignature(main.HomePage, () => ({
    __proto__: dart.getMethods(main.HomePage.__proto__),
    createState: dart.fnType(framework.State$(main.HomePage), [])
  }));
  dart.setLibraryUri(main.HomePage, I[0]);
  var _picked = dart.privateName(main, "_picked");
  var _result = dart.privateName(main, "_result");
  var _loading = dart.privateName(main, "_loading");
  var _error = dart.privateName(main, "_error");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var ProgressIndicator_semanticsValue = dart.privateName(progress_indicator, "ProgressIndicator.semanticsValue");
  var ProgressIndicator_semanticsLabel = dart.privateName(progress_indicator, "ProgressIndicator.semanticsLabel");
  var ProgressIndicator_valueColor = dart.privateName(progress_indicator, "ProgressIndicator.valueColor");
  var ProgressIndicator_color = dart.privateName(progress_indicator, "ProgressIndicator.color");
  var ProgressIndicator_backgroundColor = dart.privateName(progress_indicator, "ProgressIndicator.backgroundColor");
  var ProgressIndicator_value = dart.privateName(progress_indicator, "ProgressIndicator.value");
  var CircularProgressIndicator_strokeWidth = dart.privateName(progress_indicator, "CircularProgressIndicator.strokeWidth");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var CircularProgressIndicator__indicatorType = dart.privateName(progress_indicator, "CircularProgressIndicator._indicatorType");
  main._HomePageState = class _HomePageState extends framework.State$(main.HomePage) {
    pickImage() {
      return async.async(dart.void, (function* pickImage() {
        try {
          let picker = new image_picker.ImagePicker.new();
          let img = (yield picker.pickImage({source: image_source.ImageSource.camera, maxWidth: 1200}));
          if (img == null) return;
          this.setState(dart.fn(() => {
            this[_picked] = img;
            this[_result] = null;
            this[_error] = null;
          }, T.VoidTovoid()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this.setState(dart.fn(() => this[_error] = "Failed to pick image: " + dart.str(e), T.VoidTovoid()));
          } else
            throw e$;
        }
      }).bind(this));
    }
    uploadAndIdentify() {
      return async.async(dart.void, (function* uploadAndIdentify() {
        if (this[_picked] == null) return;
        this.setState(dart.fn(() => {
          this[_loading] = true;
          this[_error] = null;
        }, T.VoidTovoid()));
        try {
          let uri = core.Uri.parse("https://YOUR_SERVER_URL/" + "identify");
          let req = new multipart_request.MultipartRequest.new("POST", uri);
          req.files[$add](yield multipart_file.MultipartFile.fromPath("file", dart.nullCheck(this[_picked]).path));
          let streamed = (yield req.send());
          let resp = (yield response$.Response.fromStream(streamed));
          if (resp.statusCode === 200) {
            this.setState(dart.fn(() => this[_result] = T.MapNOfString$dynamic().as(convert.json.decode(resp.body)), T.VoidTovoid()));
          } else {
            this.setState(dart.fn(() => this[_error] = "Server error: " + dart.str(resp.statusCode) + "\n" + resp.body[$substring](0, 200), T.VoidTovoid()));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this.setState(dart.fn(() => this[_error] = "Upload failed: " + dart.str(e), T.VoidTovoid()));
          } else
            throw e$;
        } finally {
          this.setState(dart.fn(() => this[_loading] = false, T.VoidTovoid()));
        }
      }).bind(this));
    }
    build(context) {
      let t3;
      let textTheme = theme.Theme.of(context).textTheme;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("ApplianceID", {style: textTheme.headlineSmall}), centerTitle: true, backgroundColor: colors.Colors.black, elevation: 0}), body: new safe_area.SafeArea.new({child: new basic.Padding.new({padding: C[3] || CT.C3, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.center, children: (() => {
                let t2 = T.JSArrayOfWidget().of([]);
                if (this[_picked] != null)
                  t2.push(new basic.ClipRRect.new({borderRadius: new border_radius.BorderRadius.circular(20), child: new image.Image.file(io.File.new(dart.nullCheck(this[_picked]).path), {height: 220, fit: box_fit.BoxFit.cover})}));
                else
                  t2.push(new container.Container.new({height: 220, decoration: new box_decoration.BoxDecoration.new({color: colors.Colors.grey.shade900, borderRadius: new border_radius.BorderRadius.circular(20)}), child: new basic.Center.new({child: new text.Text.new("Take a photo of an appliance", {style: textTheme.bodyLarge})})}));
                t2.push(C[4] || CT.C4);
                t2.push(new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, 'pickImage'), child: C[5] || CT.C5}), new elevated_button.ElevatedButton.new({onPressed: this[_picked] == null ? null : dart.bind(this, 'uploadAndIdentify'), child: C[6] || CT.C6})])}));
                t2.push(C[4] || CT.C4);
                if (this[_loading]) t2.push(C[7] || CT.C7);
                if (this[_error] != null) t2.push(new basic.Padding.new({padding: C[9] || CT.C9, child: new text.Text.new(dart.nullCheck(this[_error]), {style: (t3 = textTheme.bodyMedium, t3 == null ? null : t3.copyWith({color: colors.Colors.red}))})}));
                if (this[_result] != null) t2.push(new basic.Expanded.new({child: new single_child_scroll_view.SingleChildScrollView.new({child: new container.Container.new({padding: C[10] || CT.C10, decoration: new box_decoration.BoxDecoration.new({color: colors.Colors.grey.shade900, borderRadius: new border_radius.BorderRadius.circular(16)}), child: new text.Text.new(new convert.JsonEncoder.withIndent("  ").convert(this[_result]), {style: textTheme.bodySmall})})})}));
                return t2;
              })()})})})});
    }
    static ['_#new#tearOff']() {
      return new main._HomePageState.new();
    }
  };
  (main._HomePageState.new = function() {
    this[_picked] = null;
    this[_result] = null;
    this[_loading] = false;
    this[_error] = null;
    main._HomePageState.__proto__.new.call(this);
    ;
  }).prototype = main._HomePageState.prototype;
  dart.addTypeTests(main._HomePageState);
  dart.addTypeCaches(main._HomePageState);
  dart.setMethodSignature(main._HomePageState, () => ({
    __proto__: dart.getMethods(main._HomePageState.__proto__),
    pickImage: dart.fnType(async.Future$(dart.void), []),
    uploadAndIdentify: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._HomePageState, I[0]);
  dart.setFieldSignature(main._HomePageState, () => ({
    __proto__: dart.getFields(main._HomePageState.__proto__),
    [_picked]: dart.fieldType(dart.nullable(html$.XFile)),
    [_result]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [_loading]: dart.fieldType(core.bool),
    [_error]: dart.fieldType(dart.nullable(core.String))
  }));
  main.main = function main$0() {
    return binding.runApp(C[11] || CT.C11);
  };
  dart.defineLazy(main, {
    /*main.SERVER_URL*/get SERVER_URL() {
      return "https://YOUR_SERVER_URL/";
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t3;
    let registrar = (t3 = pluginRegistrar, t3 == null ? plugin_registry.webPluginRegistrar : t3);
    image_picker_for_web.ImagePickerPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  image_picker.ImagePicker = class ImagePicker extends core.Object {
    static get platform() {
      return image_picker_platform.ImagePickerPlatform.instance;
    }
    getImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return image_picker.ImagePicker.platform.pickImage({source: source, maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice});
    }
    getMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      return image_picker.ImagePicker.platform.pickMultiImage({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality});
    }
    getVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return image_picker.ImagePicker.platform.pickVideo({source: source, preferredCameraDevice: preferredCameraDevice, maxDuration: maxDuration});
    }
    getLostData() {
      return image_picker.ImagePicker.platform.retrieveLostData();
    }
    pickImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      let imagePickerOptions = new image_options.ImagePickerOptions.createAndValidate({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice, requestFullMetadata: requestFullMetadata});
      return image_picker.ImagePicker.platform.getImageFromSource({source: source, options: imagePickerOptions});
    }
    pickMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      let imageOptions = new image_options.ImageOptions.createAndValidate({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata});
      return image_picker.ImagePicker.platform.getMultiImageWithOptions({options: new multi_image_picker_options.MultiImagePickerOptions.new({imageOptions: imageOptions})});
    }
    pickMedia(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      return async.async(T.XFileN(), function* pickMedia() {
        let listMedia = (yield image_picker.ImagePicker.platform.getMedia({options: new media_options.MediaOptions.new({imageOptions: new image_options.ImageOptions.createAndValidate({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata}), allowMultiple: false})}));
        return listMedia[$isNotEmpty] ? listMedia[$first] : null;
      });
    }
    pickMultipleMedia(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      return image_picker.ImagePicker.platform.getMedia({options: new media_options.MediaOptions.new({allowMultiple: true, imageOptions: new image_options.ImageOptions.createAndValidate({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata})})});
    }
    pickVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return image_picker.ImagePicker.platform.getVideo({source: source, preferredCameraDevice: preferredCameraDevice, maxDuration: maxDuration});
    }
    retrieveLostData() {
      return image_picker.ImagePicker.platform.getLostData();
    }
    supportsImageSource(source) {
      return image_picker.ImagePicker.platform.supportsImageSource(source);
    }
    static ['_#new#tearOff']() {
      return new image_picker.ImagePicker.new();
    }
  };
  (image_picker.ImagePicker.new = function() {
    ;
  }).prototype = image_picker.ImagePicker.prototype;
  dart.addTypeTests(image_picker.ImagePicker);
  dart.addTypeCaches(image_picker.ImagePicker);
  dart.setMethodSignature(image_picker.ImagePicker, () => ({
    __proto__: dart.getMethods(image_picker.ImagePicker.__proto__),
    getImage: dart.fnType(async.Future$(dart.nullable(html$0.PickedFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getMultiImage: dart.fnType(async.Future$(dart.nullable(core.List$(html$0.PickedFile))), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),
    getVideo: dart.fnType(async.Future$(dart.nullable(html$0.PickedFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getLostData: dart.fnType(async.Future$(lost_data.LostData), []),
    pickImage: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice, requestFullMetadata: core.bool}, {source: image_source.ImageSource}),
    pickMultiImage: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), requestFullMetadata: core.bool}, {}),
    pickMedia: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), requestFullMetadata: core.bool}, {}),
    pickMultipleMedia: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), requestFullMetadata: core.bool}, {}),
    pickVideo: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    retrieveLostData: dart.fnType(async.Future$(lost_data_response.LostDataResponse), []),
    supportsImageSource: dart.fnType(core.bool, [image_source.ImageSource])
  }));
  dart.setStaticGetterSignature(image_picker.ImagePicker, () => ['platform']);
  dart.setLibraryUri(image_picker.ImagePicker, I[1]);
  http.head = function head(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T.ClientToFutureOfResponse()));
  };
  http.get = function get(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T.ClientToFutureOfResponse()));
  };
  http.post = function post(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T.ClientToFutureOfResponse()));
  };
  http.put = function put(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T.ClientToFutureOfResponse()));
  };
  http.patch = function patch(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T.ClientToFutureOfResponse()));
  };
  http.delete = function $delete(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T.ClientToFutureOfResponse()));
  };
  http.read = function read(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T.ClientToFutureOfString()));
  };
  http.readBytes = function readBytes(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T.ClientToFutureOfUint8List()));
  };
  http._withClient = function _withClient(T, fn) {
    return async.async(T, function* _withClient() {
      let client = client$.Client.new();
      try {
        return yield fn(client);
      } finally {
        client.close();
      }
    });
  };
  var __ImagePickerPlugin__target = dart.privateName(image_picker_for_web, "_#ImagePickerPlugin#_target");
  var __ImagePickerPlugin__imageResizer = dart.privateName(image_picker_for_web, "_#ImagePickerPlugin#_imageResizer");
  var _overrides = dart.privateName(image_picker_for_web, "_overrides");
  var _imageResizer = dart.privateName(image_picker_for_web, "_imageResizer");
  var _target = dart.privateName(image_picker_for_web, "_target");
  var _ensureInitialized = dart.privateName(image_picker_for_web, "_ensureInitialized");
  var _hasOverrides = dart.privateName(image_picker_for_web, "_hasOverrides");
  var _injectAndActivate = dart.privateName(image_picker_for_web, "_injectAndActivate");
  var _getSelectedFile = dart.privateName(image_picker_for_web, "_getSelectedFile");
  var _getSelectedXFiles = dart.privateName(image_picker_for_web, "_getSelectedXFiles");
  var _getFilesFromInput = dart.privateName(image_picker_for_web, "_getFilesFromInput");
  var _handleOnChangeEvent = dart.privateName(image_picker_for_web, "_handleOnChangeEvent");
  var ImageOptions_requestFullMetadata = dart.privateName(image_options, "ImageOptions.requestFullMetadata");
  var ImageOptions_imageQuality = dart.privateName(image_options, "ImageOptions.imageQuality");
  var ImageOptions_maxHeight = dart.privateName(image_options, "ImageOptions.maxHeight");
  var ImageOptions_maxWidth = dart.privateName(image_options, "ImageOptions.maxWidth");
  var ImagePickerOptions_preferredCameraDevice = dart.privateName(image_options, "ImagePickerOptions.preferredCameraDevice");
  var MultiImagePickerOptions_imageOptions = dart.privateName(multi_image_picker_options, "MultiImagePickerOptions.imageOptions");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[2], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[16] || CT.C16)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[3]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  image_picker_platform.ImagePickerPlatform = class ImagePickerPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return image_picker_platform.ImagePickerPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verify(instance, image_picker_platform.ImagePickerPlatform._token);
      image_picker_platform.ImagePickerPlatform._instance = instance;
    }
    pickImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      dart.throw(new core.UnimplementedError.new("pickImage() has not been implemented."));
    }
    pickMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      dart.throw(new core.UnimplementedError.new("pickMultiImage() has not been implemented."));
    }
    pickVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      dart.throw(new core.UnimplementedError.new("pickVideo() has not been implemented."));
    }
    retrieveLostData() {
      dart.throw(new core.UnimplementedError.new("retrieveLostData() has not been implemented."));
    }
    getImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      dart.throw(new core.UnimplementedError.new("getImage() has not been implemented."));
    }
    getMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      dart.throw(new core.UnimplementedError.new("getMultiImage() has not been implemented."));
    }
    getMedia(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      dart.throw(new core.UnimplementedError.new("getMedia() has not been implemented."));
    }
    getVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      dart.throw(new core.UnimplementedError.new("getVideo() has not been implemented."));
    }
    getLostData() {
      dart.throw(new core.UnimplementedError.new("getLostData() has not been implemented."));
    }
    getImageFromSource(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let options = opts && 'options' in opts ? opts.options : C[13] || CT.C13;
      return this.getImage({source: source, maxHeight: options.maxHeight, maxWidth: options.maxWidth, imageQuality: options.imageQuality, preferredCameraDevice: options.preferredCameraDevice});
    }
    getMultiImageWithOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : C[14] || CT.C14;
      return async.async(T.ListOfXFile(), (function* getMultiImageWithOptions() {
        let t3;
        let pickedImages = (yield this.getMultiImage({maxWidth: options.imageOptions.maxWidth, maxHeight: options.imageOptions.maxHeight, imageQuality: options.imageOptions.imageQuality}));
        t3 = pickedImages;
        return t3 == null ? T.JSArrayOfXFile().of([]) : t3;
      }).bind(this));
    }
    supportsImageSource(source) {
      return source === image_source.ImageSource.gallery || source === image_source.ImageSource.camera;
    }
  };
  (image_picker_platform.ImagePickerPlatform.new = function() {
    image_picker_platform.ImagePickerPlatform.__proto__.new.call(this, {token: image_picker_platform.ImagePickerPlatform._token});
    ;
  }).prototype = image_picker_platform.ImagePickerPlatform.prototype;
  dart.addTypeTests(image_picker_platform.ImagePickerPlatform);
  dart.addTypeCaches(image_picker_platform.ImagePickerPlatform);
  dart.setMethodSignature(image_picker_platform.ImagePickerPlatform, () => ({
    __proto__: dart.getMethods(image_picker_platform.ImagePickerPlatform.__proto__),
    pickImage: dart.fnType(async.Future$(dart.nullable(html$0.PickedFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    pickMultiImage: dart.fnType(async.Future$(dart.nullable(core.List$(html$0.PickedFile))), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),
    pickVideo: dart.fnType(async.Future$(dart.nullable(html$0.PickedFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    retrieveLostData: dart.fnType(async.Future$(lost_data.LostData), []),
    getImage: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getMultiImage: dart.fnType(async.Future$(dart.nullable(core.List$(html$.XFile))), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),
    getMedia: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {}, {options: media_options.MediaOptions}),
    getVideo: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getLostData: dart.fnType(async.Future$(lost_data_response.LostDataResponse), []),
    getImageFromSource: dart.fnType(async.Future$(dart.nullable(html$.XFile)), [], {options: image_options.ImagePickerOptions}, {source: image_source.ImageSource}),
    getMultiImageWithOptions: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {options: multi_image_picker_options.MultiImagePickerOptions}, {}),
    supportsImageSource: dart.fnType(core.bool, [image_source.ImageSource])
  }));
  dart.setStaticGetterSignature(image_picker_platform.ImagePickerPlatform, () => ['instance']);
  dart.setStaticSetterSignature(image_picker_platform.ImagePickerPlatform, () => ['instance']);
  dart.setLibraryUri(image_picker_platform.ImagePickerPlatform, I[4]);
  dart.setStaticFieldSignature(image_picker_platform.ImagePickerPlatform, () => ['_token', '_instance']);
  dart.defineLazy(image_picker_platform.ImagePickerPlatform, {
    /*image_picker_platform.ImagePickerPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*image_picker_platform.ImagePickerPlatform._instance*/get _instance() {
      return new method_channel_image_picker.MethodChannelImagePicker.new();
    },
    set _instance(value) {}
  }, false);
  image_picker_for_web.ImagePickerPlugin = class ImagePickerPlugin extends image_picker_platform.ImagePickerPlatform {
    static ['_#new#tearOff'](opts) {
      let overrides = opts && 'overrides' in opts ? opts.overrides : null;
      let imageResizer = opts && 'imageResizer' in opts ? opts.imageResizer : null;
      return new image_picker_for_web.ImagePickerPlugin.new({overrides: overrides, imageResizer: imageResizer});
    }
    get [_hasOverrides]() {
      return this[_overrides] != null;
    }
    get [_target]() {
      let t3;
      t3 = this[__ImagePickerPlugin__target];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_target")) : t3;
    }
    set [_target](_target$35param) {
      this[__ImagePickerPlugin__target] = _target$35param;
    }
    get [_imageResizer]() {
      let t3;
      t3 = this[__ImagePickerPlugin__imageResizer];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_imageResizer")) : t3;
    }
    set [_imageResizer](_imageResizer$35param) {
      this[__ImagePickerPlugin__imageResizer] = _imageResizer$35param;
    }
    static registerWith(registrar) {
      image_picker_platform.ImagePickerPlatform.instance = new image_picker_for_web.ImagePickerPlugin.new();
    }
    pickImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let capture = this.computeCaptureAttribute(source, preferredCameraDevice);
      return this.pickFile({accept: "image/*", capture: capture});
    }
    pickVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      let capture = this.computeCaptureAttribute(source, preferredCameraDevice);
      return this.pickFile({accept: image_picker_for_web._kAcceptVideoMimeType, capture: capture});
    }
    pickFile(opts) {
      let accept = opts && 'accept' in opts ? opts.accept : null;
      let capture = opts && 'capture' in opts ? opts.capture : null;
      let input = html.FileUploadInputElement.as(this.createInputElement(accept, capture));
      this[_injectAndActivate](input);
      return this[_getSelectedFile](input);
    }
    getImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return async.async(html$.XFile, (function* getImage() {
        let capture = this.computeCaptureAttribute(source, preferredCameraDevice);
        let files = (yield this.getFiles({accept: "image/*", capture: capture}));
        return this[_imageResizer].resizeImageIfNeeded(files[$first], maxWidth, maxHeight, imageQuality);
      }).bind(this));
    }
    getVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return async.async(html$.XFile, (function* getVideo() {
        let capture = this.computeCaptureAttribute(source, preferredCameraDevice);
        let files = (yield this.getFiles({accept: image_picker_for_web._kAcceptVideoMimeType, capture: capture}));
        return files[$first];
      }).bind(this));
    }
    getMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      return async.async(T.ListOfXFile(), (function* getMultiImage() {
        let images = (yield this.getFiles({accept: "image/*", multiple: true}));
        let resized = images[$map](T.FutureOfXFile(), dart.fn(image => this[_imageResizer].resizeImageIfNeeded(image, maxWidth, maxHeight, imageQuality), T.XFileToFutureOfXFile()));
        return async.Future.wait(html$.XFile, resized);
      }).bind(this));
    }
    getMedia(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(T.ListOfXFile(), (function* getMedia() {
        let images = (yield this.getFiles({accept: "image/*" + "," + image_picker_for_web._kAcceptVideoMimeType, multiple: options.allowMultiple}));
        let resized = images[$map](T.FutureOfXFile(), dart.fn(media => {
          let t3, t3$;
          if (dart.test((t3$ = (t3 = mime_type.lookupMimeType(media.path), t3 == null ? null : t3[$startsWith]("image/")), t3$ == null ? false : t3$))) {
            return this[_imageResizer].resizeImageIfNeeded(media, options.imageOptions.maxWidth, options.imageOptions.maxHeight, options.imageOptions.imageQuality);
          }
          return T.FutureOfXFile().value(media);
        }, T.XFileToFutureOfXFile()));
        return async.Future.wait(html$.XFile, resized);
      }).bind(this));
    }
    getFiles(opts) {
      let accept = opts && 'accept' in opts ? opts.accept : null;
      let capture = opts && 'capture' in opts ? opts.capture : null;
      let multiple = opts && 'multiple' in opts ? opts.multiple : false;
      let input = html.FileUploadInputElement.as(this.createInputElement(accept, capture, {multiple: multiple}));
      this[_injectAndActivate](input);
      return this[_getSelectedXFiles](input);
    }
    computeCaptureAttribute(source, device) {
      if (source === image_source.ImageSource.camera) {
        return device === camera_device.CameraDevice.front ? "user" : "environment";
      }
      return null;
    }
    [_getFilesFromInput](input) {
      let t4, t3;
      if (this[_hasOverrides]) {
        t3 = dart.nullCheck(this[_overrides]);
        t4 = input;
        return t3.getMultipleFilesFromInput(t4);
      }
      return input[$files];
    }
    [_handleOnChangeEvent](event) {
      let input = T.FileUploadInputElementN().as(event[$target]);
      return input == null ? null : this[_getFilesFromInput](input);
    }
    [_getSelectedFile](input) {
      let completer = T.CompleterOfPickedFile().new();
      input[$onChange].first.then(core.Null, dart.fn(event => {
        let files = this[_handleOnChangeEvent](event);
        if (!completer.isCompleted && files != null) {
          completer.complete(new html$0.PickedFile.new(html.Url.createObjectUrl(files[$first])));
        }
      }, T.EventToNull()));
      input[$onError].first.then(core.Null, dart.fn(event => {
        if (!completer.isCompleted) {
          completer.completeError(event);
        }
      }, T.EventToNull()));
      return completer.future;
    }
    [_getSelectedXFiles](input) {
      let completer = T.CompleterOfListOfXFile().new();
      input[$onChange].first.then(core.Null, dart.fn(event => {
        let files = this[_handleOnChangeEvent](event);
        if (!completer.isCompleted && files != null) {
          completer.complete(files[$map](html$.XFile, dart.fn(file => {
            let t3;
            return new html$.XFile.new(html.Url.createObjectUrl(file), {name: file[$name], length: file[$size], lastModified: new core.DateTime.fromMillisecondsSinceEpoch((t3 = file.lastModified, t3 == null ? new core.DateTime.now().millisecondsSinceEpoch : t3)), mimeType: file[$type]});
          }, T.FileToXFile()))[$toList]());
        }
      }, T.EventToNull()));
      input[$onError].first.then(core.Null, dart.fn(event => {
        if (!completer.isCompleted) {
          completer.completeError(event);
        }
      }, T.EventToNull()));
      return completer.future;
    }
    [_ensureInitialized](id) {
      let t3;
      let target = html.querySelector("#" + id);
      if (target == null) {
        let targetElement = (t3 = html.Element.tag("flt-image-picker-inputs"), (() => {
          t3[$id] = id;
          return t3;
        })());
        dart.nullCheck(html.querySelector("body"))[$children][$add](targetElement);
        target = targetElement;
      }
      return target;
    }
    createInputElement(accept, capture, opts) {
      let t5, t4, t3, t3$;
      let multiple = opts && 'multiple' in opts ? opts.multiple : false;
      if (this[_hasOverrides]) {
        t3 = dart.nullCheck(this[_overrides]);
        t4 = accept;
        t5 = capture;
        return t3.createInputElement(t4, t5);
      }
      let element = (t3$ = html.FileUploadInputElement.new(), (() => {
        t3$[$accept] = accept;
        t3$[$multiple] = multiple;
        return t3$;
      })());
      if (capture != null) {
        element[$setAttribute]("capture", capture);
      }
      return element;
    }
    [_injectAndActivate](element) {
      this[_target][$children][$clear]();
      this[_target][$children][$add](element);
      element.click();
    }
  };
  (image_picker_for_web.ImagePickerPlugin.new = function(opts) {
    let t3;
    let overrides = opts && 'overrides' in opts ? opts.overrides : null;
    let imageResizer = opts && 'imageResizer' in opts ? opts.imageResizer : null;
    this[__ImagePickerPlugin__target] = null;
    this[__ImagePickerPlugin__imageResizer] = null;
    this[_overrides] = overrides;
    image_picker_for_web.ImagePickerPlugin.__proto__.new.call(this);
    this[_imageResizer] = (t3 = imageResizer, t3 == null ? new image_resizer.ImageResizer.new() : t3);
    this[_target] = this[_ensureInitialized]("__image_picker_web-file-input");
  }).prototype = image_picker_for_web.ImagePickerPlugin.prototype;
  dart.addTypeTests(image_picker_for_web.ImagePickerPlugin);
  dart.addTypeCaches(image_picker_for_web.ImagePickerPlugin);
  dart.setMethodSignature(image_picker_for_web.ImagePickerPlugin, () => ({
    __proto__: dart.getMethods(image_picker_for_web.ImagePickerPlugin.__proto__),
    pickImage: dart.fnType(async.Future$(html$0.PickedFile), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    pickVideo: dart.fnType(async.Future$(html$0.PickedFile), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    pickFile: dart.fnType(async.Future$(html$0.PickedFile), [], {accept: dart.nullable(core.String), capture: dart.nullable(core.String)}, {}),
    getImage: dart.fnType(async.Future$(html$.XFile), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getVideo: dart.fnType(async.Future$(html$.XFile), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),
    getMultiImage: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),
    getFiles: dart.fnType(async.Future$(core.List$(html$.XFile)), [], {accept: dart.nullable(core.String), capture: dart.nullable(core.String), multiple: core.bool}, {}),
    computeCaptureAttribute: dart.fnType(dart.nullable(core.String), [image_source.ImageSource, camera_device.CameraDevice]),
    [_getFilesFromInput]: dart.fnType(dart.nullable(core.List$(html.File)), [html.FileUploadInputElement]),
    [_handleOnChangeEvent]: dart.fnType(dart.nullable(core.List$(html.File)), [html.Event]),
    [_getSelectedFile]: dart.fnType(async.Future$(html$0.PickedFile), [html.FileUploadInputElement]),
    [_getSelectedXFiles]: dart.fnType(async.Future$(core.List$(html$.XFile)), [html.FileUploadInputElement]),
    [_ensureInitialized]: dart.fnType(html.Element, [core.String]),
    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)], {multiple: core.bool}, {}),
    [_injectAndActivate]: dart.fnType(dart.void, [html.Element])
  }));
  dart.setStaticMethodSignature(image_picker_for_web.ImagePickerPlugin, () => ['registerWith']);
  dart.setGetterSignature(image_picker_for_web.ImagePickerPlugin, () => ({
    __proto__: dart.getGetters(image_picker_for_web.ImagePickerPlugin.__proto__),
    [_hasOverrides]: core.bool,
    [_target]: html.Element,
    [_imageResizer]: image_resizer.ImageResizer
  }));
  dart.setSetterSignature(image_picker_for_web.ImagePickerPlugin, () => ({
    __proto__: dart.getSetters(image_picker_for_web.ImagePickerPlugin.__proto__),
    [_target]: html.Element,
    [_imageResizer]: image_resizer.ImageResizer
  }));
  dart.setLibraryUri(image_picker_for_web.ImagePickerPlugin, I[5]);
  dart.setFieldSignature(image_picker_for_web.ImagePickerPlugin, () => ({
    __proto__: dart.getFields(image_picker_for_web.ImagePickerPlugin.__proto__),
    [_overrides]: dart.finalFieldType(dart.nullable(image_picker_for_web.ImagePickerPluginTestOverrides)),
    [__ImagePickerPlugin__target]: dart.fieldType(dart.nullable(html.Element)),
    [__ImagePickerPlugin__imageResizer]: dart.fieldType(dart.nullable(image_resizer.ImageResizer))
  }));
  var __ImagePickerPluginTestOverrides_createInputElement = dart.privateName(image_picker_for_web, "_#ImagePickerPluginTestOverrides#createInputElement");
  var __ImagePickerPluginTestOverrides_getMultipleFilesFromInput = dart.privateName(image_picker_for_web, "_#ImagePickerPluginTestOverrides#getMultipleFilesFromInput");
  image_picker_for_web.ImagePickerPluginTestOverrides = class ImagePickerPluginTestOverrides extends core.Object {
    get createInputElement() {
      let t3;
      t3 = this[__ImagePickerPluginTestOverrides_createInputElement];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("createInputElement")) : t3;
    }
    set createInputElement(createInputElement$35param) {
      this[__ImagePickerPluginTestOverrides_createInputElement] = createInputElement$35param;
    }
    get getMultipleFilesFromInput() {
      let t3;
      t3 = this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("getMultipleFilesFromInput")) : t3;
    }
    set getMultipleFilesFromInput(getMultipleFilesFromInput$35param) {
      this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput] = getMultipleFilesFromInput$35param;
    }
    static ['_#new#tearOff']() {
      return new image_picker_for_web.ImagePickerPluginTestOverrides.new();
    }
  };
  (image_picker_for_web.ImagePickerPluginTestOverrides.new = function() {
    this[__ImagePickerPluginTestOverrides_createInputElement] = null;
    this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput] = null;
    ;
  }).prototype = image_picker_for_web.ImagePickerPluginTestOverrides.prototype;
  dart.addTypeTests(image_picker_for_web.ImagePickerPluginTestOverrides);
  dart.addTypeCaches(image_picker_for_web.ImagePickerPluginTestOverrides);
  dart.setGetterSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({
    __proto__: dart.getGetters(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),
    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]),
    getMultipleFilesFromInput: dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])
  }));
  dart.setSetterSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({
    __proto__: dart.getSetters(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),
    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]),
    getMultipleFilesFromInput: dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])
  }));
  dart.setLibraryUri(image_picker_for_web.ImagePickerPluginTestOverrides, I[5]);
  dart.setFieldSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({
    __proto__: dart.getFields(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),
    [__ImagePickerPluginTestOverrides_createInputElement]: dart.fieldType(dart.nullable(dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]))),
    [__ImagePickerPluginTestOverrides_getMultipleFilesFromInput]: dart.fieldType(dart.nullable(dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])))
  }));
  dart.defineLazy(image_picker_for_web, {
    /*image_picker_for_web._kImagePickerInputsDomId*/get _kImagePickerInputsDomId() {
      return "__image_picker_web-file-input";
    },
    /*image_picker_for_web._kAcceptImageMimeType*/get _kAcceptImageMimeType() {
      return "image/*";
    },
    /*image_picker_for_web._kAcceptVideoMimeType*/get _kAcceptVideoMimeType() {
      return "video/3gpp,video/x-m4v,video/mp4,video/*";
    }
  }, false);
  client$.Client = class Client extends core.Object {
    static new() {
      let t3;
      t3 = client$.zoneClient;
      return t3 == null ? browser_client.createClient() : t3;
    }
    static ['_#new#tearOff']() {
      return client$.Client.new();
    }
  };
  (client$.Client[dart.mixinNew] = function() {
  }).prototype = client$.Client.prototype;
  dart.addTypeTests(client$.Client);
  dart.addTypeCaches(client$.Client);
  dart.setStaticMethodSignature(client$.Client, () => ['new']);
  dart.setLibraryUri(client$.Client, I[6]);
  var _clientToken = dart.privateName(client$, "_clientToken");
  client$.runWithClient = function runWithClient(R, body, clientFactory, opts) {
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    return async.runZoned(R, body, {zoneValues: new (T.LinkedMapOfObjectN$ObjectN()).from([C[17] || CT.C17, async.Zone.current.bindCallback(client$.Client, clientFactory)]), zoneSpecification: zoneSpecification});
  };
  dart.copyProperties(client$, {
    get zoneClient() {
      let client = async.Zone.current._get(C[17] || CT.C17);
      return client == null ? null : T.VoidToClient().as(client)();
    }
  });
  var message$ = dart.privateName(exception, "ClientException.message");
  var uri$ = dart.privateName(exception, "ClientException.uri");
  exception.ClientException = class ClientException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exception.ClientException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exception.ClientException.new = function(message, uri = null) {
    this[message$] = message;
    this[uri$] = uri;
    ;
  }).prototype = exception.ClientException.prototype;
  dart.addTypeTests(exception.ClientException);
  dart.addTypeCaches(exception.ClientException);
  exception.ClientException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.ClientException, I[7]);
  dart.setFieldSignature(exception.ClientException, () => ({
    __proto__: dart.getFields(exception.ClientException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exception.ClientException, ['toString']);
  var _defaultEncoding = dart.privateName(request$, "_defaultEncoding");
  var _bodyBytes = dart.privateName(request$, "_bodyBytes");
  var _contentType = dart.privateName(request$, "_contentType");
  var _checkFinalized = dart.privateName(request$, "_checkFinalized");
  var method$ = dart.privateName(base_request, "BaseRequest.method");
  var url$ = dart.privateName(base_request, "BaseRequest.url");
  var headers = dart.privateName(base_request, "BaseRequest.headers");
  var _contentLength = dart.privateName(base_request, "_contentLength");
  var _persistentConnection = dart.privateName(base_request, "_persistentConnection");
  var _followRedirects = dart.privateName(base_request, "_followRedirects");
  var _maxRedirects = dart.privateName(base_request, "_maxRedirects");
  var _finalized = dart.privateName(base_request, "_finalized");
  var _checkFinalized$ = dart.privateName(base_request, "_checkFinalized");
  var StreamView__stream = dart.privateName(async, "StreamView._stream");
  base_request.BaseRequest = class BaseRequest extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentLength() {
      return this[_contentLength];
    }
    set contentLength(value) {
      if (value != null && dart.notNull(value) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(value) + "."));
      }
      this[_checkFinalized$]();
      this[_contentLength] = value;
    }
    get persistentConnection() {
      return this[_persistentConnection];
    }
    set persistentConnection(value) {
      this[_checkFinalized$]();
      this[_persistentConnection] = value;
    }
    get followRedirects() {
      return this[_followRedirects];
    }
    set followRedirects(value) {
      this[_checkFinalized$]();
      this[_followRedirects] = value;
    }
    get maxRedirects() {
      return this[_maxRedirects];
    }
    set maxRedirects(value) {
      this[_checkFinalized$]();
      this[_maxRedirects] = value;
    }
    get finalized() {
      return this[_finalized];
    }
    static _validateMethod(method) {
      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {
        dart.throw(new core.ArgumentError.value(method, "method", "Not a valid method"));
      }
      return method;
    }
    finalize() {
      if (this.finalized) dart.throw(new core.StateError.new("Can't finalize a finalized Request."));
      this[_finalized] = true;
      return C[18] || CT.C18;
    }
    send() {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let client = client$.Client.new();
        try {
          let response = (yield client.send(this));
          let stream = utils.onDone(T.ListOfint(), response.stream, dart.bind(client, 'close'));
          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
            client.close();
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    [_checkFinalized$]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
    toString() {
      return this.method + " " + dart.str(this.url);
    }
  };
  (base_request.BaseRequest.new = function(method, url) {
    this[_contentLength] = null;
    this[_persistentConnection] = true;
    this[_followRedirects] = true;
    this[_maxRedirects] = 5;
    this[_finalized] = false;
    this[url$] = url;
    this[method$] = base_request.BaseRequest._validateMethod(method);
    this[headers] = T.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T.StringToint())});
    ;
  }).prototype = base_request.BaseRequest.prototype;
  dart.addTypeTests(base_request.BaseRequest);
  dart.addTypeCaches(base_request.BaseRequest);
  dart.setMethodSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, []),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),
    [_checkFinalized$]: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);
  dart.setGetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int,
    finalized: core.bool
  }));
  dart.setSetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int
  }));
  dart.setLibraryUri(base_request.BaseRequest, I[8]);
  dart.setFieldSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getFields(base_request.BaseRequest.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.Uri),
    [_contentLength]: dart.fieldType(dart.nullable(core.int)),
    [_persistentConnection]: dart.fieldType(core.bool),
    [_followRedirects]: dart.fieldType(core.bool),
    [_maxRedirects]: dart.fieldType(core.int),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [_finalized]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);
  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);
  dart.defineLazy(base_request.BaseRequest, {
    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {
      return core.RegExp.new("^[\\w!#%&'*+\\-.^`|~]+$");
    }
  }, false);
  request$.Request = class Request extends base_request.BaseRequest {
    get contentLength() {
      return this.bodyBytes[$length];
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "non-streaming Request objects."));
    }
    get encoding() {
      if (this[_contentType] == null || !dart.nullCheck(this[_contentType]).parameters[$containsKey]("charset")) {
        return this[_defaultEncoding];
      }
      return utils.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[_contentType]).parameters[$_get]("charset")));
    }
    set encoding(value) {
      this[_checkFinalized]();
      this[_defaultEncoding] = value;
      let contentType = this[_contentType];
      if (contentType == null) return;
      this[_contentType] = contentType.change({parameters: new (T.IdentityMapOfString$String()).from(["charset", value.name])});
    }
    get bodyBytes() {
      return this[_bodyBytes];
    }
    set bodyBytes(value) {
      this[_checkFinalized]();
      this[_bodyBytes] = utils.toUint8List(value);
    }
    get body() {
      return this.encoding.decode(this.bodyBytes);
    }
    set body(value) {
      this.bodyBytes = this.encoding.encode(value);
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("text", "plain", new (T.IdentityMapOfString$String()).from(["charset", this.encoding.name]));
      } else if (!contentType.parameters[$containsKey]("charset")) {
        this[_contentType] = contentType.change({parameters: new (T.IdentityMapOfString$String()).from(["charset", this.encoding.name])});
      }
    }
    get bodyFields() {
      let contentType = this[_contentType];
      if (contentType == null || contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot access the body fields of a Request without " + "content-type \"application/x-www-form-urlencoded\"."));
      }
      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});
    }
    set bodyFields(fields) {
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("application", "x-www-form-urlencoded");
      } else if (contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot set the body fields of a Request with " + "content-type \"" + contentType.mimeType + "\"."));
      }
      this.body = utils.mapToQuery(fields, {encoding: this.encoding});
    }
    static ['_#new#tearOff'](method, url) {
      return new request$.Request.new(method, url);
    }
    finalize() {
      super.finalize();
      return byte_stream.ByteStream.fromBytes(this.bodyBytes);
    }
    get [_contentType]() {
      let contentType = this.headers[$_get]("content-type");
      if (contentType == null) return null;
      return media_type.MediaType.parse(contentType);
    }
    set [_contentType](value) {
      if (value == null) {
        this.headers[$remove]("content-type");
      } else {
        this.headers[$_set]("content-type", dart.toString(value));
      }
    }
    [_checkFinalized]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
  };
  (request$.Request.new = function(method, url) {
    this[_defaultEncoding] = convert.utf8;
    this[_bodyBytes] = _native_typed_data.NativeUint8List.new(0);
    request$.Request.__proto__.new.call(this, method, url);
    ;
  }).prototype = request$.Request.prototype;
  dart.addTypeTests(request$.Request);
  dart.addTypeCaches(request$.Request);
  dart.setMethodSignature(request$.Request, () => ({
    __proto__: dart.getMethods(request$.Request.__proto__),
    [_checkFinalized]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(request$.Request, () => ({
    __proto__: dart.getGetters(request$.Request.__proto__),
    contentLength: core.int,
    encoding: convert.Encoding,
    bodyBytes: typed_data.Uint8List,
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setSetterSignature(request$.Request, () => ({
    __proto__: dart.getSetters(request$.Request.__proto__),
    encoding: convert.Encoding,
    bodyBytes: core.List$(core.int),
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setLibraryUri(request$.Request, I[9]);
  dart.setFieldSignature(request$.Request, () => ({
    __proto__: dart.getFields(request$.Request.__proto__),
    [_defaultEncoding]: dart.fieldType(convert.Encoding),
    [_bodyBytes]: dart.fieldType(typed_data.Uint8List)
  }));
  var bodyBytes$ = dart.privateName(response$, "Response.bodyBytes");
  var request$0 = dart.privateName(base_response, "BaseResponse.request");
  var statusCode$ = dart.privateName(base_response, "BaseResponse.statusCode");
  var reasonPhrase$ = dart.privateName(base_response, "BaseResponse.reasonPhrase");
  var contentLength$ = dart.privateName(base_response, "BaseResponse.contentLength");
  var headers$ = dart.privateName(base_response, "BaseResponse.headers");
  var isRedirect$ = dart.privateName(base_response, "BaseResponse.isRedirect");
  var persistentConnection$ = dart.privateName(base_response, "BaseResponse.persistentConnection");
  base_response.BaseResponse = class BaseResponse extends core.Object {
    get request() {
      return this[request$0];
    }
    set request(value) {
      super.request = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get reasonPhrase() {
      return this[reasonPhrase$];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get contentLength() {
      return this[contentLength$];
    }
    set contentLength(value) {
      super.contentLength = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    get isRedirect() {
      return this[isRedirect$];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get persistentConnection() {
      return this[persistentConnection$];
    }
    set persistentConnection(value) {
      super.persistentConnection = value;
    }
  };
  (base_response.BaseResponse.new = function(statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[20] || CT.C20;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[statusCode$] = statusCode;
    this[contentLength$] = contentLength;
    this[request$0] = request;
    this[headers$] = headers;
    this[isRedirect$] = isRedirect;
    this[persistentConnection$] = persistentConnection;
    this[reasonPhrase$] = reasonPhrase;
    if (this.statusCode < 100) {
      dart.throw(new core.ArgumentError.new("Invalid status code " + dart.str(this.statusCode) + "."));
    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {
      dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(this.contentLength) + "."));
    }
  }).prototype = base_response.BaseResponse.prototype;
  dart.addTypeTests(base_response.BaseResponse);
  dart.addTypeCaches(base_response.BaseResponse);
  dart.setLibraryUri(base_response.BaseResponse, I[10]);
  dart.setFieldSignature(base_response.BaseResponse, () => ({
    __proto__: dart.getFields(base_response.BaseResponse.__proto__),
    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),
    statusCode: dart.finalFieldType(core.int),
    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),
    contentLength: dart.finalFieldType(dart.nullable(core.int)),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    persistentConnection: dart.finalFieldType(core.bool)
  }));
  response$.Response = class Response extends base_response.BaseResponse {
    get bodyBytes() {
      return this[bodyBytes$];
    }
    set bodyBytes(value) {
      super.bodyBytes = value;
    }
    get body() {
      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);
    }
    static ['_#new#tearOff'](body, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[20] || CT.C20;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static fromStream(response) {
      return async.async(response$.Response, function* fromStream() {
        let body = (yield response.stream.toBytes());
        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
      });
    }
  };
  (response$.Response.new = function(body, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[20] || CT.C20;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
  }).prototype = response$.Response.prototype;
  (response$.Response.bytes = function(bodyBytes, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[20] || CT.C20;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[bodyBytes$] = utils.toUint8List(bodyBytes);
    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = response$.Response.prototype;
  dart.addTypeTests(response$.Response);
  dart.addTypeCaches(response$.Response);
  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);
  dart.setGetterSignature(response$.Response, () => ({
    __proto__: dart.getGetters(response$.Response.__proto__),
    body: core.String
  }));
  dart.setLibraryUri(response$.Response, I[11]);
  dart.setFieldSignature(response$.Response, () => ({
    __proto__: dart.getFields(response$.Response.__proto__),
    bodyBytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return utils.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[$_get]("charset"));
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[$_get]("content-type");
    if (contentType != null) return media_type.MediaType.parse(contentType);
    return new media_type.MediaType.new("application", "octet-stream");
  };
  var _controller = dart.privateName(streamed_request, "_controller");
  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {
    get sink() {
      return this[_controller].sink;
    }
    static ['_#new#tearOff'](method, url) {
      return new streamed_request.StreamedRequest.new(method, url);
    }
    finalize() {
      super.finalize();
      return new byte_stream.ByteStream.new(this[_controller].stream);
    }
  };
  (streamed_request.StreamedRequest.new = function(method, url) {
    this[_controller] = T.StreamControllerOfListOfint().new({sync: true});
    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = streamed_request.StreamedRequest.prototype;
  dart.addTypeTests(streamed_request.StreamedRequest);
  dart.addTypeCaches(streamed_request.StreamedRequest);
  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),
    sink: async.EventSink$(core.List$(core.int))
  }));
  dart.setLibraryUri(streamed_request.StreamedRequest, I[12]);
  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),
    [_controller]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))
  }));
  var _sendUnstreamed = dart.privateName(base_client, "_sendUnstreamed");
  var _checkResponseSuccess = dart.privateName(base_client, "_checkResponseSuccess");
  base_client.BaseClient = class BaseClient extends core.Object {
    head(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("HEAD", url, headers);
    }
    get(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("GET", url, headers);
    }
    post(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("POST", url, headers, body, encoding);
    }
    put(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PUT", url, headers, body, encoding);
    }
    patch(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PATCH", url, headers, body, encoding);
    }
    delete(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("DELETE", url, headers, body, encoding);
    }
    read(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(core.String, (function* read() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.body;
      }).bind(this));
    }
    readBytes(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(typed_data.Uint8List, (function* readBytes() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.bodyBytes;
      }).bind(this));
    }
    [_sendUnstreamed](method, url, headers, body = null, encoding = null) {
      return async.async(response$.Response, (function* _sendUnstreamed() {
        let request = new request$.Request.new(method, url);
        if (headers != null) request.headers[$addAll](headers);
        if (encoding != null) request.encoding = encoding;
        if (body != null) {
          if (typeof body == 'string') {
            request.body = body;
          } else if (core.List.is(body)) {
            request.bodyBytes = body[$cast](core.int);
          } else if (core.Map.is(body)) {
            request.bodyFields = body[$cast](core.String, core.String);
          } else {
            dart.throw(new core.ArgumentError.new("Invalid request body \"" + dart.str(body) + "\"."));
          }
        }
        return response$.Response.fromStream(yield this.send(request));
      }).bind(this));
    }
    [_checkResponseSuccess](url, response) {
      if (response.statusCode < 400) return;
      let message = "Request to " + dart.str(url) + " failed with status " + dart.str(response.statusCode);
      if (response.reasonPhrase != null) {
        message = message + ": " + dart.str(response.reasonPhrase);
      }
      dart.throw(new exception.ClientException.new(message + ".", url));
    }
    close() {
    }
  };
  (base_client.BaseClient.new = function() {
    ;
  }).prototype = base_client.BaseClient.prototype;
  dart.addTypeTests(base_client.BaseClient);
  dart.addTypeCaches(base_client.BaseClient);
  base_client.BaseClient[dart.implements] = () => [client$.Client];
  dart.setMethodSignature(base_client.BaseClient, () => ({
    __proto__: dart.getMethods(base_client.BaseClient.__proto__),
    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    [_sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.nullable(core.Object), dart.nullable(convert.Encoding)]),
    [_checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(base_client.BaseClient, I[13]);
  var Utf8Codec__allowMalformed = dart.privateName(convert, "Utf8Codec._allowMalformed");
  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {
    static ['_#new#tearOff'](stream) {
      return new byte_stream.ByteStream.new(stream);
    }
    static fromBytes(bytes) {
      return new byte_stream.ByteStream.new(T.StreamOfListOfint().value(bytes));
    }
    static ['_#fromBytes#tearOff'](bytes) {
      return byte_stream.ByteStream.fromBytes(bytes);
    }
    toBytes() {
      let completer = T.CompleterOfUint8List().new();
      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T.ListOfintTovoid()));
      this.listen(T.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
      return completer.future;
    }
    bytesToString(encoding = C[21] || CT.C21) {
      return encoding.decodeStream(this);
    }
    toStringStream(encoding = C[21] || CT.C21) {
      return encoding.decoder.bind(this);
    }
  };
  (byte_stream.ByteStream.new = function(stream) {
    byte_stream.ByteStream.__proto__.new.call(this, stream);
    ;
  }).prototype = byte_stream.ByteStream.prototype;
  dart.addTypeTests(byte_stream.ByteStream);
  dart.addTypeCaches(byte_stream.ByteStream);
  dart.setMethodSignature(byte_stream.ByteStream, () => ({
    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),
    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),
    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])
  }));
  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);
  dart.setLibraryUri(byte_stream.ByteStream, I[14]);
  var field$ = dart.privateName(multipart_file, "MultipartFile.field");
  var length$ = dart.privateName(multipart_file, "MultipartFile.length");
  var filename$ = dart.privateName(multipart_file, "MultipartFile.filename");
  var contentType$ = dart.privateName(multipart_file, "MultipartFile.contentType");
  var _isFinalized = dart.privateName(multipart_file, "_isFinalized");
  var _stream = dart.privateName(multipart_file, "_stream");
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get field() {
      return this[field$];
    }
    set field(value) {
      super.field = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      super.filename = value;
    }
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[_isFinalized];
    }
    static ['_#new#tearOff'](field, stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});
    }
    static fromBytes(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let stream = byte_stream.ByteStream.fromBytes(value);
      return new multipart_file.MultipartFile.new(field, stream, value[$length], {filename: filename, contentType: contentType});
    }
    static ['_#fromBytes#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});
    }
    static fromString(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});
    }
    static ['_#fromString#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});
    }
    static fromPath(field, filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[_isFinalized] = true;
      return this[_stream];
    }
  };
  (multipart_file.MultipartFile.new = function(field, stream, length, opts) {
    let t4;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    this[_isFinalized] = false;
    this[field$] = field;
    this[length$] = length;
    this[filename$] = filename;
    this[_stream] = utils.toByteStream(stream);
    this[contentType$] = (t4 = contentType, t4 == null ? new media_type.MediaType.new("application", "octet-stream") : t4);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[15]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    field: dart.finalFieldType(core.String),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(media_type.MediaType),
    [_stream]: dart.finalFieldType(byte_stream.ByteStream),
    [_isFinalized]: dart.fieldType(core.bool)
  }));
  var fields = dart.privateName(multipart_request, "MultipartRequest.fields");
  var files = dart.privateName(multipart_request, "MultipartRequest.files");
  var _headerForField = dart.privateName(multipart_request, "_headerForField");
  var _headerForFile = dart.privateName(multipart_request, "_headerForFile");
  var _boundaryString = dart.privateName(multipart_request, "_boundaryString");
  var _finalize = dart.privateName(multipart_request, "_finalize");
  var _browserEncode = dart.privateName(multipart_request, "_browserEncode");
  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {
    get fields() {
      return this[fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](method, url) {
      return new multipart_request.MultipartRequest.new(method, url);
    }
    get contentLength() {
      let length = 0;
      this.fields[$forEach](dart.fn((name, value) => {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForField](name, value))[$length] + convert.utf8.encode(value)[$length] + "\r\n".length);
      }, T.StringAndStringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.length + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "multipart requests."));
    }
    finalize() {
      let boundary = this[_boundaryString]();
      this.headers[$_set]("content-type", "multipart/form-data; boundary=" + boundary);
      super.finalize();
      return new byte_stream.ByteStream.new(this[_finalize](boundary));
    }
    [_finalize](boundary) {
      return new (T._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {
        let line = C[22] || CT.C22;
        let separator = convert.utf8.encode("--" + boundary + "\r\n");
        let close = convert.utf8.encode("--" + boundary + "--\r\n");
        for (let field of this.fields[$entries]) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForField](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForFile](file)))) return;
          yield;
          if (stream.addStream(file.finalize())) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
    [_headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + this[_browserEncode](name) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [_headerForFile](file) {
      let header = "content-type: " + dart.str(file.contentType) + "\r\n" + "content-disposition: form-data; name=\"" + this[_browserEncode](file.field) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + this[_browserEncode](dart.nullCheck(file.filename)) + "\"";
      }
      return header + "\r\n\r\n";
    }
    [_browserEncode](value) {
      return value[$replaceAll](multipart_request._newlineRegExp, "%0D%0A")[$replaceAll]("\"", "%22");
    }
    [_boundaryString]() {
      let prefix = "dart-http-boundary-";
      let list = T.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[$length])), T.intToint()), {growable: false});
      return prefix + core.String.fromCharCodes(list);
    }
  };
  (multipart_request.MultipartRequest.new = function(method, url) {
    this[fields] = new (T.IdentityMapOfString$String()).new();
    this[files] = T.JSArrayOfMultipartFile().of([]);
    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = multipart_request.MultipartRequest.prototype;
  dart.addTypeTests(multipart_request.MultipartRequest);
  dart.addTypeCaches(multipart_request.MultipartRequest);
  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),
    [_finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),
    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [_headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),
    [_browserEncode]: dart.fnType(core.String, [core.String]),
    [_boundaryString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(multipart_request.MultipartRequest, I[16]);
  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),
    fields: dart.finalFieldType(core.Map$(core.String, core.String)),
    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))
  }));
  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);
  dart.defineLazy(multipart_request.MultipartRequest, {
    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {
      return 70;
    },
    /*multipart_request.MultipartRequest._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(multipart_request, {
    /*multipart_request._newlineRegExp*/get _newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    }
  }, false);
  var stream$ = dart.privateName(streamed_response, "StreamedResponse.stream");
  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      super.stream = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
  };
  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[20] || CT.C20;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[stream$] = utils.toByteStream(stream);
    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = streamed_response.StreamedResponse.prototype;
  dart.addTypeTests(streamed_response.StreamedResponse);
  dart.addTypeCaches(streamed_response.StreamedResponse);
  dart.setLibraryUri(streamed_response.StreamedResponse, I[17]);
  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({
    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),
    stream: dart.finalFieldType(byte_stream.ByteStream)
  }));
  image_resizer.ImageResizer = class ImageResizer extends core.Object {
    resizeImageIfNeeded(file, maxWidth, maxHeight, imageQuality) {
      return async.async(html$.XFile, (function* resizeImageIfNeeded() {
        if (!image_resizer_utils.imageResizeNeeded(maxWidth, maxHeight, imageQuality) || file.mimeType === "image/gif") {
          return file;
        }
        try {
          let imageElement = (yield this.loadImage(file.path));
          let canvas = this.resizeImageElement(imageElement, maxWidth, maxHeight);
          let resizedImage = (yield this.writeCanvasToFile(file, canvas, imageQuality));
          html.Url.revokeObjectUrl(file.path);
          return resizedImage;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return file;
          } else
            throw e$;
        }
      }).bind(this));
    }
    loadImage(blobUrl) {
      let imageLoadCompleter = T.CompleterOfImageElement().new();
      let imageElement = html.ImageElement.new();
      imageElement.src = blobUrl;
      imageElement[$onLoad].listen(dart.fn(event => {
        imageLoadCompleter.complete(imageElement);
      }, T.EventTovoid()));
      imageElement[$onError].listen(dart.fn(event => {
        imageElement[$remove]();
        imageLoadCompleter.completeError("Error while loading image.");
      }, T.EventTovoid()));
      return imageLoadCompleter.future;
    }
    resizeImageElement(source, maxWidth, maxHeight) {
      let newImageSize = image_resizer_utils.calculateSizeOfDownScaledImage(new ui.Size.new(dart.nullCheck(source.width)[$toDouble](), dart.nullCheck(source.height)[$toDouble]()), maxWidth, maxHeight);
      let canvas = html.CanvasElement.new();
      canvas.width = newImageSize.width[$toInt]();
      canvas.height = newImageSize.height[$toInt]();
      let context = canvas[$context2D];
      if (maxHeight == null && maxWidth == null) {
        context.drawImage(source, 0, 0);
      } else {
        context[$drawImageScaled](source, 0, 0, dart.nullCheck(canvas.width), dart.nullCheck(canvas.height));
      }
      return canvas;
    }
    writeCanvasToFile(originalFile, canvas, imageQuality) {
      return async.async(html$.XFile, function* writeCanvasToFile() {
        let t5;
        let calculatedImageQuality = math.min(core.int, (t5 = imageQuality, t5 == null ? 100 : t5), 100) / 100;
        let blob = (yield canvas[$toBlob](originalFile.mimeType, calculatedImageQuality));
        return new html$.XFile.new(html.Url.createObjectUrlFromBlob(blob), {mimeType: originalFile.mimeType, name: "scaled_" + originalFile.name, lastModified: new core.DateTime.now(), length: blob[$size]});
      });
    }
    static ['_#new#tearOff']() {
      return new image_resizer.ImageResizer.new();
    }
  };
  (image_resizer.ImageResizer.new = function() {
    ;
  }).prototype = image_resizer.ImageResizer.prototype;
  dart.addTypeTests(image_resizer.ImageResizer);
  dart.addTypeCaches(image_resizer.ImageResizer);
  dart.setMethodSignature(image_resizer.ImageResizer, () => ({
    __proto__: dart.getMethods(image_resizer.ImageResizer.__proto__),
    resizeImageIfNeeded: dart.fnType(async.Future$(html$.XFile), [html$.XFile, dart.nullable(core.double), dart.nullable(core.double), dart.nullable(core.int)]),
    loadImage: dart.fnType(async.Future$(html.ImageElement), [core.String]),
    resizeImageElement: dart.fnType(html.CanvasElement, [html.ImageElement, dart.nullable(core.double), dart.nullable(core.double)]),
    writeCanvasToFile: dart.fnType(async.Future$(html$.XFile), [html$.XFile, html.CanvasElement, dart.nullable(core.int)])
  }));
  dart.setLibraryUri(image_resizer.ImageResizer, I[18]);
  var cameraDelegate = dart.privateName(image_picker_platform, "CameraDelegatingImagePickerPlatform.cameraDelegate");
  const getImageFromSource = Symbol("getImageFromSource");
  const getVideo = Symbol("getVideo");
  image_picker_platform.CameraDelegatingImagePickerPlatform = class CameraDelegatingImagePickerPlatform extends image_picker_platform.ImagePickerPlatform {
    get cameraDelegate() {
      return this[cameraDelegate];
    }
    set cameraDelegate(value) {
      this[cameraDelegate] = value;
    }
    supportsImageSource(source) {
      if (source === image_source.ImageSource.camera) {
        return this.cameraDelegate != null;
      }
      return super.supportsImageSource(source);
    }
    getImageFromSource(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let options = opts && 'options' in opts ? opts.options : C[13] || CT.C13;
      return async.async(T.XFileN(), (function* getImageFromSource$() {
        if (source === image_source.ImageSource.camera) {
          let delegate = this.cameraDelegate;
          if (delegate == null) {
            dart.throw(new core.StateError.new("This implementation of ImagePickerPlatform requires a " + "\"cameraDelegate\" in order to use ImageSource.camera"));
          }
          return delegate.takePhoto({options: new camera_delegate.ImagePickerCameraDelegateOptions.new({preferredCameraDevice: options.preferredCameraDevice})});
        }
        return this[getImageFromSource]({source: source, options: options});
      }).bind(this));
    }
    getVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return async.async(T.XFileN(), (function* getVideo$() {
        if (source === image_source.ImageSource.camera) {
          let delegate = this.cameraDelegate;
          if (delegate == null) {
            dart.throw(new core.StateError.new("This implementation of ImagePickerPlatform requires a " + "\"cameraDelegate\" in order to use ImageSource.camera"));
          }
          return delegate.takeVideo({options: new camera_delegate.ImagePickerCameraDelegateOptions.new({preferredCameraDevice: preferredCameraDevice, maxVideoDuration: maxDuration})});
        }
        return this[getVideo]({source: source, preferredCameraDevice: preferredCameraDevice, maxDuration: maxDuration});
      }).bind(this));
    }
    [getImageFromSource](opts) {
      return super.getImageFromSource(opts);
    }
    [getVideo](opts) {
      return super.getVideo(opts);
    }
  };
  (image_picker_platform.CameraDelegatingImagePickerPlatform.new = function() {
    this[cameraDelegate] = null;
    image_picker_platform.CameraDelegatingImagePickerPlatform.__proto__.new.call(this);
    ;
  }).prototype = image_picker_platform.CameraDelegatingImagePickerPlatform.prototype;
  dart.addTypeTests(image_picker_platform.CameraDelegatingImagePickerPlatform);
  dart.addTypeCaches(image_picker_platform.CameraDelegatingImagePickerPlatform);
  dart.setLibraryUri(image_picker_platform.CameraDelegatingImagePickerPlatform, I[4]);
  dart.setFieldSignature(image_picker_platform.CameraDelegatingImagePickerPlatform, () => ({
    __proto__: dart.getFields(image_picker_platform.CameraDelegatingImagePickerPlatform.__proto__),
    cameraDelegate: dart.fieldType(dart.nullable(camera_delegate.ImagePickerCameraDelegate))
  }));
  dart.defineLazy(types, {
    /*types.kTypeImage*/get kTypeImage() {
      return "image";
    },
    /*types.kTypeVideo*/get kTypeVideo() {
      return "video";
    },
    /*types.kTypeMedia*/get kTypeMedia() {
      return "media";
    }
  }, false);
  var withCredentials = dart.privateName(browser_client, "BrowserClient.withCredentials");
  var _xhrs = dart.privateName(browser_client, "_xhrs");
  var _isClosed = dart.privateName(browser_client, "_isClosed");
  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {
    get withCredentials() {
      return this[withCredentials];
    }
    set withCredentials(value) {
      this[withCredentials] = value;
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t5;
        if (this[_isClosed]) {
          dart.throw(new exception.ClientException.new("HTTP request failed. Client is already closed.", request.url));
        }
        let bytes = (yield request.finalize().toBytes());
        let xhr = html.HttpRequest.new();
        this[_xhrs].add(xhr);
        t5 = xhr;
        (() => {
          t5.open(request.method, dart.str(request.url), {async: true});
          t5[$responseType] = "arraybuffer";
          t5.withCredentials = this.withCredentials;
          return t5;
        })();
        request.headers[$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = T.CompleterOfStreamedResponse().new();
        async.unawaited(xhr[$onLoad].first.then(dart.void, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[$response])[$asUint8List]();
          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[$length], request: request, headers: xhr[$responseHeaders], reasonPhrase: xhr.statusText}));
        }, T.ProgressEventToNull())));
        async.unawaited(xhr[$onError].first.then(dart.void, dart.fn(_ => {
          completer.completeError(new exception.ClientException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T.ProgressEventToNull())));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[_xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      this[_isClosed] = true;
      for (let xhr of this[_xhrs]) {
        xhr.abort();
      }
      this[_xhrs].clear();
    }
    static ['_#new#tearOff']() {
      return new browser_client.BrowserClient.new();
    }
  };
  (browser_client.BrowserClient.new = function() {
    this[_xhrs] = T.LinkedHashSetOfHttpRequest().new();
    this[withCredentials] = false;
    this[_isClosed] = false;
    ;
  }).prototype = browser_client.BrowserClient.prototype;
  dart.addTypeTests(browser_client.BrowserClient);
  dart.addTypeCaches(browser_client.BrowserClient);
  dart.setMethodSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(browser_client.BrowserClient, I[19]);
  dart.setFieldSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),
    [_xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool),
    [_isClosed]: dart.fieldType(core.bool)
  }));
  browser_client.createClient = function createClient() {
    ;
    return new browser_client.BrowserClient.new();
  };
  var Latin1Codec__allowInvalid = dart.privateName(convert, "Latin1Codec._allowInvalid");
  utils.mapToQuery = function mapToQuery(map, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let pairs = T.JSArrayOfListOfString().of([]);
    map[$forEach](dart.fn((key, value) => {
      let t5, t5$;
      return pairs[$add](T.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t5 = encoding, t5 == null ? convert.utf8 : t5)}), core.Uri.encodeQueryComponent(value, {encoding: (t5$ = encoding, t5$ == null ? convert.utf8 : t5$)})]));
    }, T.StringAndStringTovoid()));
    return pairs[$map](core.String, dart.fn(pair => pair[$_get](0) + "=" + pair[$_get](1), T.ListOfStringToString()))[$join]("&");
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[23] || CT.C23) {
    let t5;
    if (charset == null) return fallback;
    t5 = convert.Encoding.getByName(charset);
    return t5 == null ? fallback : t5;
  };
  utils.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {
    let t5;
    t5 = convert.Encoding.getByName(charset);
    return t5 == null ? dart.throw(new core.FormatException.new("Unsupported encoding \"" + charset + "\".")) : t5;
  };
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.toUint8List = function toUint8List(input) {
    if (typed_data.Uint8List.is(input)) return input;
    if (typed_data.TypedData.is(input)) {
      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[$buffer]);
    }
    return _native_typed_data.NativeUint8List.fromList(input);
  };
  utils.toByteStream = function toByteStream(stream) {
    if (byte_stream.ByteStream.is(stream)) return stream;
    return new byte_stream.ByteStream.new(stream);
  };
  utils.onDone = function onDone(T, stream, onDone) {
    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {
        sink.close();
        onDone();
      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));
  };
  dart.defineLazy(utils, {
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    return dart.throw(new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available."));
  };
  dart.defineLazy(boundary_characters, {
    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {
      return C[24] || CT.C24;
    }
  }, false);
  var _boundary = dart.privateName(mime_multipart_transformer, "_boundary");
  mime_shared.MimeMultipart = class MimeMultipart extends async.Stream$(core.List$(core.int)) {};
  (mime_shared.MimeMultipart.new = function() {
    mime_shared.MimeMultipart.__proto__.new.call(this);
    ;
  }).prototype = mime_shared.MimeMultipart.prototype;
  dart.addTypeTests(mime_shared.MimeMultipart);
  dart.addTypeCaches(mime_shared.MimeMultipart);
  dart.setLibraryUri(mime_shared.MimeMultipart, I[20]);
  mime_multipart_transformer.MimeMultipartTransformer = class MimeMultipartTransformer extends async.StreamTransformerBase$(core.List$(core.int), mime_shared.MimeMultipart) {
    static ['_#new#tearOff'](boundary) {
      return new mime_multipart_transformer.MimeMultipartTransformer.new(boundary);
    }
    bind(stream) {
      T.StreamOfListOfint().as(stream);
      return new bound_multipart_stream.BoundMultipartStream.new(this[_boundary], stream).stream;
    }
  };
  (mime_multipart_transformer.MimeMultipartTransformer.new = function(boundary) {
    this[_boundary] = mime_multipart_transformer._getBoundary(boundary);
    mime_multipart_transformer.MimeMultipartTransformer.__proto__.new.call(this);
    ;
  }).prototype = mime_multipart_transformer.MimeMultipartTransformer.prototype;
  dart.addTypeTests(mime_multipart_transformer.MimeMultipartTransformer);
  dart.addTypeCaches(mime_multipart_transformer.MimeMultipartTransformer);
  dart.setMethodSignature(mime_multipart_transformer.MimeMultipartTransformer, () => ({
    __proto__: dart.getMethods(mime_multipart_transformer.MimeMultipartTransformer.__proto__),
    bind: dart.fnType(async.Stream$(mime_shared.MimeMultipart), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(mime_multipart_transformer.MimeMultipartTransformer, I[21]);
  dart.setFieldSignature(mime_multipart_transformer.MimeMultipartTransformer, () => ({
    __proto__: dart.getFields(mime_multipart_transformer.MimeMultipartTransformer.__proto__),
    [_boundary]: dart.finalFieldType(core.List$(core.int))
  }));
  mime_multipart_transformer._getBoundary = function _getBoundary(boundary) {
    let charCodes = boundary[$codeUnits];
    let boundaryList = _native_typed_data.NativeUint8List.new(4 + charCodes[$length]);
    boundaryList[$_set](0, 13);
    boundaryList[$_set](1, 10);
    boundaryList[$_set](2, 45);
    boundaryList[$_set](3, 45);
    boundaryList[$setRange](4, 4 + charCodes[$length], charCodes);
    return boundaryList;
  };
  var message$0 = dart.privateName(mime_shared, "MimeMultipartException.message");
  mime_shared.MimeMultipartException = class MimeMultipartException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message = "") {
      return new mime_shared.MimeMultipartException.new(message);
    }
    toString() {
      return "MimeMultipartException: " + this.message;
    }
  };
  (mime_shared.MimeMultipartException.new = function(message = "") {
    this[message$0] = message;
    ;
  }).prototype = mime_shared.MimeMultipartException.prototype;
  dart.addTypeTests(mime_shared.MimeMultipartException);
  dart.addTypeCaches(mime_shared.MimeMultipartException);
  mime_shared.MimeMultipartException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(mime_shared.MimeMultipartException, I[20]);
  dart.setFieldSignature(mime_shared.MimeMultipartException, () => ({
    __proto__: dart.getFields(mime_shared.MimeMultipartException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(mime_shared.MimeMultipartException, ['toString']);
  var _extensionMap = dart.privateName(mime_type, "_extensionMap");
  var _magicNumbers = dart.privateName(mime_type, "_magicNumbers");
  var _useDefault = dart.privateName(mime_type, "_useDefault");
  var _magicNumbersMaxLength = dart.privateName(mime_type, "_magicNumbersMaxLength");
  mime_type.MimeTypeResolver = class MimeTypeResolver extends core.Object {
    static ['_#empty#tearOff']() {
      return new mime_type.MimeTypeResolver.empty();
    }
    static ['_#new#tearOff']() {
      return new mime_type.MimeTypeResolver.new();
    }
    get magicNumbersMaxLength() {
      return this[_magicNumbersMaxLength];
    }
    lookup(path, opts) {
      let headerBytes = opts && 'headerBytes' in opts ? opts.headerBytes : null;
      let result = null;
      if (headerBytes != null) {
        result = mime_type.MimeTypeResolver._matchMagic(headerBytes, this[_magicNumbers]);
        if (result != null) return result;
        if (this[_useDefault]) {
          result = mime_type.MimeTypeResolver._matchMagic(headerBytes, magic_number.initialMagicNumbers);
          if (result != null) return result;
        }
      }
      let ext = mime_type.MimeTypeResolver._ext(path);
      result = this[_extensionMap][$_get](ext);
      if (result != null) return result;
      if (this[_useDefault]) {
        result = default_extension_map.defaultExtensionMap[$_get](ext);
        if (result != null) return result;
      }
      return null;
    }
    addExtension(extension, mimeType) {
      this[_extensionMap][$_set](extension, mimeType);
    }
    addMagicNumber(bytes, mimeType, opts) {
      let mask = opts && 'mask' in opts ? opts.mask : null;
      if (mask != null && bytes[$length] !== mask[$length]) {
        dart.throw(new core.ArgumentError.new("Bytes and mask are of different lengths"));
      }
      if (bytes[$length] > this[_magicNumbersMaxLength]) {
        this[_magicNumbersMaxLength] = bytes[$length];
      }
      this[_magicNumbers][$add](new magic_number.MagicNumber.new(mimeType, bytes, {mask: mask}));
    }
    static _matchMagic(headerBytes, magicNumbers) {
      for (let mn of magicNumbers) {
        if (mn.matches(headerBytes)) return mn.mimeType;
      }
      return null;
    }
    static _ext(path) {
      let index = path[$lastIndexOf](".");
      if (index < 0 || index + 1 >= path.length) return path;
      return path[$substring](index + 1)[$toLowerCase]();
    }
  };
  (mime_type.MimeTypeResolver.empty = function() {
    this[_extensionMap] = new (T.IdentityMapOfString$String()).new();
    this[_magicNumbers] = T.JSArrayOfMagicNumber().of([]);
    this[_useDefault] = false;
    this[_magicNumbersMaxLength] = 0;
    ;
  }).prototype = mime_type.MimeTypeResolver.prototype;
  (mime_type.MimeTypeResolver.new = function() {
    this[_extensionMap] = new (T.IdentityMapOfString$String()).new();
    this[_magicNumbers] = T.JSArrayOfMagicNumber().of([]);
    this[_useDefault] = true;
    this[_magicNumbersMaxLength] = 12;
    ;
  }).prototype = mime_type.MimeTypeResolver.prototype;
  dart.addTypeTests(mime_type.MimeTypeResolver);
  dart.addTypeCaches(mime_type.MimeTypeResolver);
  dart.setMethodSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getMethods(mime_type.MimeTypeResolver.__proto__),
    lookup: dart.fnType(dart.nullable(core.String), [core.String], {headerBytes: dart.nullable(core.List$(core.int))}, {}),
    addExtension: dart.fnType(dart.void, [core.String, core.String]),
    addMagicNumber: dart.fnType(dart.void, [core.List$(core.int), core.String], {mask: dart.nullable(core.List$(core.int))}, {})
  }));
  dart.setStaticMethodSignature(mime_type.MimeTypeResolver, () => ['_matchMagic', '_ext']);
  dart.setGetterSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getGetters(mime_type.MimeTypeResolver.__proto__),
    magicNumbersMaxLength: core.int
  }));
  dart.setLibraryUri(mime_type.MimeTypeResolver, I[22]);
  dart.setFieldSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getFields(mime_type.MimeTypeResolver.__proto__),
    [_extensionMap]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [_magicNumbers]: dart.finalFieldType(core.List$(magic_number.MagicNumber)),
    [_useDefault]: dart.finalFieldType(core.bool),
    [_magicNumbersMaxLength]: dart.fieldType(core.int)
  }));
  mime_type.lookupMimeType = function lookupMimeType(path, opts) {
    let headerBytes = opts && 'headerBytes' in opts ? opts.headerBytes : null;
    return mime_type._globalResolver.lookup(path, {headerBytes: headerBytes});
  };
  mime_type.extensionFromMime = function extensionFromMime(mime) {
    mime = mime[$toLowerCase]();
    for (let entry of default_extension_map.defaultExtensionMap[$entries]) {
      if (default_extension_map.defaultExtensionMap[$_get](entry.key) === mime) {
        return entry.key;
      }
    }
    return mime;
  };
  dart.copyProperties(mime_type, {
    get defaultMagicNumbersMaxLength() {
      return mime_type._globalResolver.magicNumbersMaxLength;
    }
  });
  dart.defineLazy(mime_type, {
    /*mime_type._globalResolver*/get _globalResolver() {
      return new mime_type.MimeTypeResolver.new();
    }
  }, false);
  image_resizer_utils.imageResizeNeeded = function imageResizeNeeded(maxWidth, maxHeight, imageQuality) {
    return imageQuality != null ? image_resizer_utils.isImageQualityValid(imageQuality) : maxWidth != null || maxHeight != null;
  };
  image_resizer_utils.isImageQualityValid = function isImageQualityValid(imageQuality) {
    return imageQuality >= 0 && imageQuality <= 100;
  };
  image_resizer_utils.calculateSizeOfDownScaledImage = function calculateSizeOfDownScaledImage(imageSize, maxWidth, maxHeight) {
    let widthFactor = maxWidth != null ? imageSize.width / dart.notNull(maxWidth) : 1;
    let heightFactor = maxHeight != null ? imageSize.height / dart.notNull(maxHeight) : 1;
    let resizeFactor = math.max(core.double, widthFactor, heightFactor);
    return resizeFactor > 1 ? imageSize['~/'](resizeFactor) : imageSize;
  };
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[3]);
  var _getImagePath = dart.privateName(method_channel_image_picker, "_getImagePath");
  var _getMultiImagePath = dart.privateName(method_channel_image_picker, "_getMultiImagePath");
  var _getVideoPath = dart.privateName(method_channel_image_picker, "_getVideoPath");
  method_channel_image_picker.MethodChannelImagePicker = class MethodChannelImagePicker extends image_picker_platform.ImagePickerPlatform {
    get channel() {
      return method_channel_image_picker._channel;
    }
    pickImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return async.async(T.PickedFileN(), (function* pickImage() {
        let path = (yield this[_getImagePath]({source: source, maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice}));
        return path != null ? new html$0.PickedFile.new(path) : null;
      }).bind(this));
    }
    pickMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      return async.async(T.ListNOfPickedFile(), (function* pickMultiImage() {
        let paths = (yield this[_getMultiImagePath]({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality}));
        if (paths == null) {
          return null;
        }
        return paths[$map](html$0.PickedFile, dart.fn(path => new html$0.PickedFile.new(core.String.as(path)), T.dynamicToPickedFile()))[$toList]();
      }).bind(this));
    }
    [_getMultiImagePath](opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      if (imageQuality != null && (dart.notNull(imageQuality) < 0 || dart.notNull(imageQuality) > 100)) {
        dart.throw(new core.ArgumentError.value(imageQuality, "imageQuality", "must be between 0 and 100"));
      }
      if (maxWidth != null && dart.notNull(maxWidth) < 0) {
        dart.throw(new core.ArgumentError.value(maxWidth, "maxWidth", "cannot be negative"));
      }
      if (maxHeight != null && dart.notNull(maxHeight) < 0) {
        dart.throw(new core.ArgumentError.value(maxHeight, "maxHeight", "cannot be negative"));
      }
      return method_channel_image_picker._channel.invokeMethod(T.ListN(), "pickMultiImage", new (T.IdentityMapOfString$dynamic()).from(["maxWidth", maxWidth, "maxHeight", maxHeight, "imageQuality", imageQuality, "requestFullMetadata", requestFullMetadata]));
    }
    [_getImagePath](opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      if (imageQuality != null && (dart.notNull(imageQuality) < 0 || dart.notNull(imageQuality) > 100)) {
        dart.throw(new core.ArgumentError.value(imageQuality, "imageQuality", "must be between 0 and 100"));
      }
      if (maxWidth != null && dart.notNull(maxWidth) < 0) {
        dart.throw(new core.ArgumentError.value(maxWidth, "maxWidth", "cannot be negative"));
      }
      if (maxHeight != null && dart.notNull(maxHeight) < 0) {
        dart.throw(new core.ArgumentError.value(maxHeight, "maxHeight", "cannot be negative"));
      }
      return method_channel_image_picker._channel.invokeMethod(core.String, "pickImage", new (T.IdentityMapOfString$dynamic()).from(["source", source.index, "maxWidth", maxWidth, "maxHeight", maxHeight, "imageQuality", imageQuality, "cameraDevice", preferredCameraDevice.index, "requestFullMetadata", requestFullMetadata]));
    }
    pickVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return async.async(T.PickedFileN(), (function* pickVideo() {
        let path = (yield this[_getVideoPath]({source: source, maxDuration: maxDuration, preferredCameraDevice: preferredCameraDevice}));
        return path != null ? new html$0.PickedFile.new(path) : null;
      }).bind(this));
    }
    [_getVideoPath](opts) {
      let t5;
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return method_channel_image_picker._channel.invokeMethod(core.String, "pickVideo", new (T.IdentityMapOfString$dynamic()).from(["source", source.index, "maxDuration", (t5 = maxDuration, t5 == null ? null : t5.inSeconds), "cameraDevice", preferredCameraDevice.index]));
    }
    retrieveLostData() {
      return async.async(lost_data.LostData, function* retrieveLostData() {
        let result = (yield method_channel_image_picker._channel.invokeMapMethod(core.String, dart.dynamic, "retrieve"));
        if (result == null) {
          return new lost_data.LostData.empty();
        }
        if (!(result[$containsKey]("path") !== result[$containsKey]("errorCode"))) dart.assertFailed(null, I[23], 158, 12, "result.containsKey('path') != result.containsKey('errorCode')");
        let type = T.StringN().as(result[$_get]("type"));
        if (!(type === "image" || type === "video")) dart.assertFailed(null, I[23], 161, 12, "type == kTypeImage || type == kTypeVideo");
        let retrieveType = null;
        if (type === "image") {
          retrieveType = retrieve_type.RetrieveType.image;
        } else if (type === "video") {
          retrieveType = retrieve_type.RetrieveType.video;
        }
        let exception = null;
        if (result[$containsKey]("errorCode")) {
          exception = new message_codec.PlatformException.new({code: core.String.as(dart.nullCheck(result[$_get]("errorCode"))), message: T.StringN().as(result[$_get]("errorMessage"))});
        }
        let path = T.StringN().as(result[$_get]("path"));
        return new lost_data.LostData.new({file: path != null ? new html$0.PickedFile.new(path) : null, exception: exception, type: retrieveType});
      });
    }
    getImage(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return async.async(T.XFileN(), (function* getImage() {
        let path = (yield this[_getImagePath]({source: source, maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice}));
        return path != null ? new html$.XFile.new(path) : null;
      }).bind(this));
    }
    getImageFromSource(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let options = opts && 'options' in opts ? opts.options : C[13] || CT.C13;
      return async.async(T.XFileN(), (function* getImageFromSource() {
        let path = (yield this[_getImagePath]({source: source, maxHeight: options.maxHeight, maxWidth: options.maxWidth, imageQuality: options.imageQuality, preferredCameraDevice: options.preferredCameraDevice, requestFullMetadata: options.requestFullMetadata}));
        return path != null ? new html$.XFile.new(path) : null;
      }).bind(this));
    }
    getMultiImage(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      return async.async(T.ListNOfXFile(), (function* getMultiImage() {
        let paths = (yield this[_getMultiImagePath]({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality}));
        if (paths == null) {
          return null;
        }
        return paths[$map](html$.XFile, dart.fn(path => new html$.XFile.new(core.String.as(path)), T.dynamicToXFile()))[$toList]();
      }).bind(this));
    }
    getMultiImageWithOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : C[14] || CT.C14;
      return async.async(T.ListOfXFile(), (function* getMultiImageWithOptions() {
        let paths = (yield this[_getMultiImagePath]({maxWidth: options.imageOptions.maxWidth, maxHeight: options.imageOptions.maxHeight, imageQuality: options.imageOptions.imageQuality, requestFullMetadata: options.imageOptions.requestFullMetadata}));
        if (paths == null) {
          return T.JSArrayOfXFile().of([]);
        }
        return paths[$map](html$.XFile, dart.fn(path => new html$.XFile.new(core.String.as(path)), T.dynamicToXFile()))[$toList]();
      }).bind(this));
    }
    getMedia(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(T.ListOfXFile(), function* getMedia() {
        let t5;
        let imageOptions = options.imageOptions;
        let args = new (T.IdentityMapOfString$dynamic()).from(["maxImageWidth", imageOptions.maxWidth, "maxImageHeight", imageOptions.maxHeight, "imageQuality", imageOptions.imageQuality, "allowMultiple", options.allowMultiple]);
        let paths = (yield method_channel_image_picker._channel.invokeMethod(T.ListN(), "pickMedia", args).then(T.ListNOfXFile(), dart.fn(paths => {
          let t5;
          t5 = paths;
          return t5 == null ? null : t5[$map](html$.XFile, dart.fn(path => new html$.XFile.new(core.String.as(path)), T.dynamicToXFile()))[$toList]();
        }, T.ListNToListNOfXFile())));
        t5 = paths;
        return t5 == null ? T.JSArrayOfXFile().of([]) : t5;
      });
    }
    getVideo(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;
      return async.async(T.XFileN(), (function* getVideo() {
        let path = (yield this[_getVideoPath]({source: source, maxDuration: maxDuration, preferredCameraDevice: preferredCameraDevice}));
        return path != null ? new html$.XFile.new(path) : null;
      }).bind(this));
    }
    getLostData() {
      return async.async(lost_data_response.LostDataResponse, function* getLostData() {
        let t5;
        let pickedFileList = null;
        let result = (yield method_channel_image_picker._channel.invokeMapMethod(core.String, dart.dynamic, "retrieve"));
        if (result == null) {
          return new lost_data_response.LostDataResponse.empty();
        }
        if (!(result[$containsKey]("path") !== result[$containsKey]("errorCode"))) dart.assertFailed(null, I[23], 304, 12, "result.containsKey('path') != result.containsKey('errorCode')");
        let type = T.StringN().as(result[$_get]("type"));
        if (!(type === "image" || type === "video" || type === "media")) dart.assertFailed(null, I[23], 308, 7, "type == kTypeImage || type == kTypeVideo || type == kTypeMedia");
        let retrieveType = null;
        switch (type) {
          case "image":
            {
              retrieveType = retrieve_type.RetrieveType.image;
              break;
            }
          case "video":
            {
              retrieveType = retrieve_type.RetrieveType.video;
              break;
            }
          case "media":
            {
              retrieveType = retrieve_type.RetrieveType.media;
              break;
            }
        }
        let exception = null;
        if (result[$containsKey]("errorCode")) {
          exception = new message_codec.PlatformException.new({code: core.String.as(dart.nullCheck(result[$_get]("errorCode"))), message: T.StringN().as(result[$_get]("errorMessage"))});
        }
        let path = T.StringN().as(result[$_get]("path"));
        let pathList = (t5 = T.ListN().as(result[$_get]("pathList")), t5 == null ? null : t5[$cast](core.String));
        if (pathList != null) {
          pickedFileList = T.JSArrayOfXFile().of([]);
          for (let path of pathList) {
            pickedFileList[$add](new html$.XFile.new(path));
          }
        }
        return new lost_data_response.LostDataResponse.new({file: path != null ? new html$.XFile.new(path) : null, exception: exception, type: retrieveType, files: pickedFileList});
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_image_picker.MethodChannelImagePicker.new();
    }
  };
  (method_channel_image_picker.MethodChannelImagePicker.new = function() {
    method_channel_image_picker.MethodChannelImagePicker.__proto__.new.call(this);
    ;
  }).prototype = method_channel_image_picker.MethodChannelImagePicker.prototype;
  dart.addTypeTests(method_channel_image_picker.MethodChannelImagePicker);
  dart.addTypeCaches(method_channel_image_picker.MethodChannelImagePicker);
  dart.setMethodSignature(method_channel_image_picker.MethodChannelImagePicker, () => ({
    __proto__: dart.getMethods(method_channel_image_picker.MethodChannelImagePicker.__proto__),
    [_getMultiImagePath]: dart.fnType(async.Future$(dart.nullable(core.List)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), requestFullMetadata: core.bool}, {}),
    [_getImagePath]: dart.fnType(async.Future$(dart.nullable(core.String)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice, requestFullMetadata: core.bool}, {source: image_source.ImageSource}),
    [_getVideoPath]: dart.fnType(async.Future$(dart.nullable(core.String)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource})
  }));
  dart.setGetterSignature(method_channel_image_picker.MethodChannelImagePicker, () => ({
    __proto__: dart.getGetters(method_channel_image_picker.MethodChannelImagePicker.__proto__),
    channel: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(method_channel_image_picker.MethodChannelImagePicker, I[24]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_image_picker, {
    /*method_channel_image_picker._channel*/get _channel() {
      return C[25] || CT.C25;
    }
  }, false);
  var preferredCameraDevice$ = dart.privateName(camera_delegate, "ImagePickerCameraDelegateOptions.preferredCameraDevice");
  var maxVideoDuration$ = dart.privateName(camera_delegate, "ImagePickerCameraDelegateOptions.maxVideoDuration");
  camera_delegate.ImagePickerCameraDelegateOptions = class ImagePickerCameraDelegateOptions extends core.Object {
    get preferredCameraDevice() {
      return this[preferredCameraDevice$];
    }
    set preferredCameraDevice(value) {
      super.preferredCameraDevice = value;
    }
    get maxVideoDuration() {
      return this[maxVideoDuration$];
    }
    set maxVideoDuration(value) {
      super.maxVideoDuration = value;
    }
    static ['_#new#tearOff'](opts) {
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      let maxVideoDuration = opts && 'maxVideoDuration' in opts ? opts.maxVideoDuration : null;
      return new camera_delegate.ImagePickerCameraDelegateOptions.new({preferredCameraDevice: preferredCameraDevice, maxVideoDuration: maxVideoDuration});
    }
  };
  (camera_delegate.ImagePickerCameraDelegateOptions.new = function(opts) {
    let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
    let maxVideoDuration = opts && 'maxVideoDuration' in opts ? opts.maxVideoDuration : null;
    this[preferredCameraDevice$] = preferredCameraDevice;
    this[maxVideoDuration$] = maxVideoDuration;
    ;
  }).prototype = camera_delegate.ImagePickerCameraDelegateOptions.prototype;
  dart.addTypeTests(camera_delegate.ImagePickerCameraDelegateOptions);
  dart.addTypeCaches(camera_delegate.ImagePickerCameraDelegateOptions);
  dart.setLibraryUri(camera_delegate.ImagePickerCameraDelegateOptions, I[25]);
  dart.setFieldSignature(camera_delegate.ImagePickerCameraDelegateOptions, () => ({
    __proto__: dart.getFields(camera_delegate.ImagePickerCameraDelegateOptions.__proto__),
    preferredCameraDevice: dart.finalFieldType(camera_device.CameraDevice),
    maxVideoDuration: dart.finalFieldType(dart.nullable(core.Duration))
  }));
  camera_delegate.ImagePickerCameraDelegate = class ImagePickerCameraDelegate extends core.Object {};
  (camera_delegate.ImagePickerCameraDelegate.new = function() {
    ;
  }).prototype = camera_delegate.ImagePickerCameraDelegate.prototype;
  dart.addTypeTests(camera_delegate.ImagePickerCameraDelegate);
  dart.addTypeCaches(camera_delegate.ImagePickerCameraDelegate);
  dart.setLibraryUri(camera_delegate.ImagePickerCameraDelegate, I[25]);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  camera_device.CameraDevice = class CameraDevice extends core._Enum {
    [_enumToString]() {
      return "CameraDevice." + this[_name];
    }
  };
  (camera_device.CameraDevice.new = function(index, name) {
    camera_device.CameraDevice.__proto__.new.call(this, index, name);
    ;
  }).prototype = camera_device.CameraDevice.prototype;
  dart.addTypeTests(camera_device.CameraDevice);
  dart.addTypeCaches(camera_device.CameraDevice);
  dart.setMethodSignature(camera_device.CameraDevice, () => ({
    __proto__: dart.getMethods(camera_device.CameraDevice.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(camera_device.CameraDevice, I[26]);
  dart.setStaticFieldSignature(camera_device.CameraDevice, () => ['values', 'rear', 'front']);
  dart.defineLazy(camera_device.CameraDevice, {
    /*camera_device.CameraDevice.values*/get values() {
      return C[28] || CT.C28;
    },
    /*camera_device.CameraDevice.rear*/get rear() {
      return C[12] || CT.C12;
    },
    /*camera_device.CameraDevice.front*/get front() {
      return C[29] || CT.C29;
    }
  }, false);
  const maxWidth$ = ImageOptions_maxWidth;
  const maxHeight$ = ImageOptions_maxHeight;
  const imageQuality$ = ImageOptions_imageQuality;
  const requestFullMetadata$ = ImageOptions_requestFullMetadata;
  image_options.ImageOptions = class ImageOptions extends core.Object {
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get maxHeight() {
      return this[maxHeight$];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    get imageQuality() {
      return this[imageQuality$];
    }
    set imageQuality(value) {
      super.imageQuality = value;
    }
    get requestFullMetadata() {
      return this[requestFullMetadata$];
    }
    set requestFullMetadata(value) {
      super.requestFullMetadata = value;
    }
    static ['_#new#tearOff'](opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      return new image_options.ImageOptions.new({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata});
    }
    static ['_#createAndValidate#tearOff'](opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
      return new image_options.ImageOptions.createAndValidate({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata});
    }
    static _validateOptions(opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      if (imageQuality != null && (dart.notNull(imageQuality) < 0 || dart.notNull(imageQuality) > 100)) {
        dart.throw(new core.ArgumentError.value(imageQuality, "imageQuality", "must be between 0 and 100"));
      }
      if (maxWidth != null && dart.notNull(maxWidth) < 0) {
        dart.throw(new core.ArgumentError.value(maxWidth, "maxWidth", "cannot be negative"));
      }
      if (maxHeight != null && dart.notNull(maxHeight) < 0) {
        dart.throw(new core.ArgumentError.value(maxHeight, "maxHeight", "cannot be negative"));
      }
    }
  };
  (image_options.ImageOptions.new = function(opts) {
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
    let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
    this[maxHeight$] = maxHeight;
    this[maxWidth$] = maxWidth;
    this[imageQuality$] = imageQuality;
    this[requestFullMetadata$] = requestFullMetadata;
    ;
  }).prototype = image_options.ImageOptions.prototype;
  (image_options.ImageOptions.createAndValidate = function(opts) {
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
    let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
    this[maxHeight$] = maxHeight;
    this[maxWidth$] = maxWidth;
    this[imageQuality$] = imageQuality;
    this[requestFullMetadata$] = requestFullMetadata;
    image_options.ImageOptions._validateOptions({maxWidth: this.maxWidth, maxHeight: this.maxHeight, imageQuality: this.imageQuality});
  }).prototype = image_options.ImageOptions.prototype;
  dart.addTypeTests(image_options.ImageOptions);
  dart.addTypeCaches(image_options.ImageOptions);
  dart.setStaticMethodSignature(image_options.ImageOptions, () => ['_validateOptions']);
  dart.setLibraryUri(image_options.ImageOptions, I[27]);
  dart.setFieldSignature(image_options.ImageOptions, () => ({
    __proto__: dart.getFields(image_options.ImageOptions.__proto__),
    maxWidth: dart.finalFieldType(dart.nullable(core.double)),
    maxHeight: dart.finalFieldType(dart.nullable(core.double)),
    imageQuality: dart.finalFieldType(dart.nullable(core.int)),
    requestFullMetadata: dart.finalFieldType(core.bool)
  }));
  const preferredCameraDevice$0 = ImagePickerOptions_preferredCameraDevice;
  image_options.ImagePickerOptions = class ImagePickerOptions extends image_options.ImageOptions {
    get preferredCameraDevice() {
      return this[preferredCameraDevice$0];
    }
    set preferredCameraDevice(value) {
      super.preferredCameraDevice = value;
    }
    static ['_#new#tearOff'](opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return new image_options.ImagePickerOptions.new({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata, preferredCameraDevice: preferredCameraDevice});
    }
    static ['_#createAndValidate#tearOff'](opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
      let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : null;
      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
      return new image_options.ImagePickerOptions.createAndValidate({maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata, preferredCameraDevice: preferredCameraDevice});
    }
  };
  (image_options.ImagePickerOptions.new = function(opts) {
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
    let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
    let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
    this[preferredCameraDevice$0] = preferredCameraDevice;
    image_options.ImagePickerOptions.__proto__.new.call(this, {maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata});
    ;
  }).prototype = image_options.ImagePickerOptions.prototype;
  (image_options.ImagePickerOptions.createAndValidate = function(opts) {
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;
    let requestFullMetadata = opts && 'requestFullMetadata' in opts ? opts.requestFullMetadata : true;
    let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[12] || CT.C12;
    this[preferredCameraDevice$0] = preferredCameraDevice;
    image_options.ImagePickerOptions.__proto__.createAndValidate.call(this, {maxHeight: maxHeight, maxWidth: maxWidth, imageQuality: imageQuality, requestFullMetadata: requestFullMetadata});
    ;
  }).prototype = image_options.ImagePickerOptions.prototype;
  dart.addTypeTests(image_options.ImagePickerOptions);
  dart.addTypeCaches(image_options.ImagePickerOptions);
  dart.setLibraryUri(image_options.ImagePickerOptions, I[27]);
  dart.setFieldSignature(image_options.ImagePickerOptions, () => ({
    __proto__: dart.getFields(image_options.ImagePickerOptions.__proto__),
    preferredCameraDevice: dart.finalFieldType(camera_device.CameraDevice)
  }));
  image_source.ImageSource = class ImageSource extends core._Enum {
    [_enumToString]() {
      return "ImageSource." + this[_name];
    }
  };
  (image_source.ImageSource.new = function(index, name) {
    image_source.ImageSource.__proto__.new.call(this, index, name);
    ;
  }).prototype = image_source.ImageSource.prototype;
  dart.addTypeTests(image_source.ImageSource);
  dart.addTypeCaches(image_source.ImageSource);
  dart.setMethodSignature(image_source.ImageSource, () => ({
    __proto__: dart.getMethods(image_source.ImageSource.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(image_source.ImageSource, I[28]);
  dart.setStaticFieldSignature(image_source.ImageSource, () => ['values', 'camera', 'gallery']);
  dart.defineLazy(image_source.ImageSource, {
    /*image_source.ImageSource.values*/get values() {
      return C[30] || CT.C30;
    },
    /*image_source.ImageSource.camera*/get camera() {
      return C[31] || CT.C31;
    },
    /*image_source.ImageSource.gallery*/get gallery() {
      return C[32] || CT.C32;
    }
  }, false);
  var file$ = dart.privateName(lost_data_response, "LostDataResponse.file");
  var exception$ = dart.privateName(lost_data_response, "LostDataResponse.exception");
  var type$ = dart.privateName(lost_data_response, "LostDataResponse.type");
  var files$ = dart.privateName(lost_data_response, "LostDataResponse.files");
  var _empty = dart.privateName(lost_data_response, "_empty");
  lost_data_response.LostDataResponse = class LostDataResponse extends core.Object {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get exception() {
      return this[exception$];
    }
    set exception(value) {
      super.exception = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get files() {
      return this[files$];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](opts) {
      let file = opts && 'file' in opts ? opts.file : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let files = opts && 'files' in opts ? opts.files : null;
      return new lost_data_response.LostDataResponse.new({file: file, exception: exception, type: type, files: files});
    }
    static ['_#empty#tearOff']() {
      return new lost_data_response.LostDataResponse.empty();
    }
    get isEmpty() {
      return this[_empty];
    }
  };
  (lost_data_response.LostDataResponse.new = function(opts) {
    let file = opts && 'file' in opts ? opts.file : null;
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let files = opts && 'files' in opts ? opts.files : null;
    this[_empty] = false;
    this[file$] = file;
    this[exception$] = exception;
    this[type$] = type;
    this[files$] = files;
    ;
  }).prototype = lost_data_response.LostDataResponse.prototype;
  (lost_data_response.LostDataResponse.empty = function() {
    this[_empty] = false;
    this[file$] = null;
    this[exception$] = null;
    this[type$] = null;
    this[_empty] = true;
    this[files$] = null;
    ;
  }).prototype = lost_data_response.LostDataResponse.prototype;
  dart.addTypeTests(lost_data_response.LostDataResponse);
  dart.addTypeCaches(lost_data_response.LostDataResponse);
  dart.setGetterSignature(lost_data_response.LostDataResponse, () => ({
    __proto__: dart.getGetters(lost_data_response.LostDataResponse.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(lost_data_response.LostDataResponse, I[29]);
  dart.setFieldSignature(lost_data_response.LostDataResponse, () => ({
    __proto__: dart.getFields(lost_data_response.LostDataResponse.__proto__),
    file: dart.finalFieldType(dart.nullable(html$.XFile)),
    exception: dart.finalFieldType(dart.nullable(message_codec.PlatformException)),
    type: dart.finalFieldType(dart.nullable(retrieve_type.RetrieveType)),
    [_empty]: dart.fieldType(core.bool),
    files: dart.finalFieldType(dart.nullable(core.List$(html$.XFile)))
  }));
  var imageOptions$ = dart.privateName(media_options, "MediaOptions.imageOptions");
  var allowMultiple$ = dart.privateName(media_options, "MediaOptions.allowMultiple");
  media_options.MediaOptions = class MediaOptions extends core.Object {
    get imageOptions() {
      return this[imageOptions$];
    }
    set imageOptions(value) {
      super.imageOptions = value;
    }
    get allowMultiple() {
      return this[allowMultiple$];
    }
    set allowMultiple(value) {
      super.allowMultiple = value;
    }
    static ['_#new#tearOff'](opts) {
      let imageOptions = opts && 'imageOptions' in opts ? opts.imageOptions : C[15] || CT.C15;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : null;
      return new media_options.MediaOptions.new({imageOptions: imageOptions, allowMultiple: allowMultiple});
    }
  };
  (media_options.MediaOptions.new = function(opts) {
    let imageOptions = opts && 'imageOptions' in opts ? opts.imageOptions : C[15] || CT.C15;
    let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : null;
    this[imageOptions$] = imageOptions;
    this[allowMultiple$] = allowMultiple;
    ;
  }).prototype = media_options.MediaOptions.prototype;
  dart.addTypeTests(media_options.MediaOptions);
  dart.addTypeCaches(media_options.MediaOptions);
  dart.setLibraryUri(media_options.MediaOptions, I[30]);
  dart.setFieldSignature(media_options.MediaOptions, () => ({
    __proto__: dart.getFields(media_options.MediaOptions.__proto__),
    imageOptions: dart.finalFieldType(image_options.ImageOptions),
    allowMultiple: dart.finalFieldType(core.bool)
  }));
  media_selection_type.MediaSelectionType = class MediaSelectionType extends core._Enum {
    [_enumToString]() {
      return "MediaSelectionType." + this[_name];
    }
  };
  (media_selection_type.MediaSelectionType.new = function(index, name) {
    media_selection_type.MediaSelectionType.__proto__.new.call(this, index, name);
    ;
  }).prototype = media_selection_type.MediaSelectionType.prototype;
  dart.addTypeTests(media_selection_type.MediaSelectionType);
  dart.addTypeCaches(media_selection_type.MediaSelectionType);
  dart.setMethodSignature(media_selection_type.MediaSelectionType, () => ({
    __proto__: dart.getMethods(media_selection_type.MediaSelectionType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(media_selection_type.MediaSelectionType, I[31]);
  dart.setStaticFieldSignature(media_selection_type.MediaSelectionType, () => ['values', 'image', 'video']);
  dart.defineLazy(media_selection_type.MediaSelectionType, {
    /*media_selection_type.MediaSelectionType.values*/get values() {
      return C[33] || CT.C33;
    },
    /*media_selection_type.MediaSelectionType.image*/get image() {
      return C[34] || CT.C34;
    },
    /*media_selection_type.MediaSelectionType.video*/get video() {
      return C[35] || CT.C35;
    }
  }, false);
  const imageOptions$0 = MultiImagePickerOptions_imageOptions;
  multi_image_picker_options.MultiImagePickerOptions = class MultiImagePickerOptions extends core.Object {
    get imageOptions() {
      return this[imageOptions$0];
    }
    set imageOptions(value) {
      super.imageOptions = value;
    }
    static ['_#new#tearOff'](opts) {
      let imageOptions = opts && 'imageOptions' in opts ? opts.imageOptions : C[15] || CT.C15;
      return new multi_image_picker_options.MultiImagePickerOptions.new({imageOptions: imageOptions});
    }
  };
  (multi_image_picker_options.MultiImagePickerOptions.new = function(opts) {
    let imageOptions = opts && 'imageOptions' in opts ? opts.imageOptions : C[15] || CT.C15;
    this[imageOptions$0] = imageOptions;
    ;
  }).prototype = multi_image_picker_options.MultiImagePickerOptions.prototype;
  dart.addTypeTests(multi_image_picker_options.MultiImagePickerOptions);
  dart.addTypeCaches(multi_image_picker_options.MultiImagePickerOptions);
  dart.setLibraryUri(multi_image_picker_options.MultiImagePickerOptions, I[32]);
  dart.setFieldSignature(multi_image_picker_options.MultiImagePickerOptions, () => ({
    __proto__: dart.getFields(multi_image_picker_options.MultiImagePickerOptions.__proto__),
    imageOptions: dart.finalFieldType(image_options.ImageOptions)
  }));
  retrieve_type.RetrieveType = class RetrieveType extends core._Enum {
    [_enumToString]() {
      return "RetrieveType." + this[_name];
    }
  };
  (retrieve_type.RetrieveType.new = function(index, name) {
    retrieve_type.RetrieveType.__proto__.new.call(this, index, name);
    ;
  }).prototype = retrieve_type.RetrieveType.prototype;
  dart.addTypeTests(retrieve_type.RetrieveType);
  dart.addTypeCaches(retrieve_type.RetrieveType);
  dart.setMethodSignature(retrieve_type.RetrieveType, () => ({
    __proto__: dart.getMethods(retrieve_type.RetrieveType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(retrieve_type.RetrieveType, I[33]);
  dart.setStaticFieldSignature(retrieve_type.RetrieveType, () => ['values', 'image', 'video', 'media']);
  dart.defineLazy(retrieve_type.RetrieveType, {
    /*retrieve_type.RetrieveType.values*/get values() {
      return C[36] || CT.C36;
    },
    /*retrieve_type.RetrieveType.image*/get image() {
      return C[37] || CT.C37;
    },
    /*retrieve_type.RetrieveType.video*/get video() {
      return C[38] || CT.C38;
    },
    /*retrieve_type.RetrieveType.media*/get media() {
      return C[39] || CT.C39;
    }
  }, false);
  var scheme$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme");
  var parameters$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters");
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[scheme$];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[parameters$];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$.wrapFormatException(T.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan.whitespace);
        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan.whitespace);
            if (scanner.scan(scan.token)) {
              params[$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T.IdentityMapOfString$String()).new();
        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts) {
      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;
      scanner.expect(scan.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$toLowerCase]();
      scanner.scan(scan.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan.whitespace);
      scanner.expect("=");
      scanner.scan(scan.whitespace);
      if (scanner.scan(scan.token)) {
        params[$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[scheme$] = scheme;
    this[parameters$] = new (T.UnmodifiableMapViewOfString$String()).new(new (T.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[34]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[$toLowerCase](), T.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[$toLowerCase](), T.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[35]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[36]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[40] || CT.C40;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t13;
    date = date.toUtc();
    let buffer = (t13 = new core.StringBuffer.new(), (() => {
      t13.write(http_date._weekdays[$_get](date.weekday - 1));
      t13.write(", ");
      t13.write(date.day <= 9 ? "0" : "");
      t13.write(date.day[$toString]());
      t13.write(" ");
      t13.write(http_date._months[$_get](date.month - 1));
      t13.write(" ");
      t13.write(date.year[$toString]());
      t13.write(date.hour <= 9 ? " 0" : " ");
      t13.write(date.hour[$toString]());
      t13.write(date.minute <= 9 ? ":0" : ":");
      t13.write(date.minute[$toString]());
      t13.write(date.second <= 9 ? ":0" : ":");
      t13.write(date.second[$toString]());
      t13.write(" GMT");
      return t13;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[41] || CT.C41;
    },
    /*http_date._months*/get _months() {
      return C[42] || CT.C42;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  var type$0 = dart.privateName(media_type, "MediaType.type");
  var subtype$ = dart.privateName(media_type, "MediaType.subtype");
  var parameters$0 = dart.privateName(media_type, "MediaType.parameters");
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[parameters$0];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan.whitespace);
        scanner.expect(scan.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan.whitespace);
        let parameters = new (T.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan.whitespace);
          scanner.expect(scan.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan.expectQuotedString(scanner);
          }
          scanner.scan(scan.whitespace);
          parameters[$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let subtype = opts && 'subtype' in opts ? opts.subtype : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[$split]("/");
        if (segments[$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[$_get](0);
        subtype = segments[$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T.LinkedHashMapOfString$String().from(this.parameters);
        parameters[$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t13;
      let buffer = (t13 = new core.StringBuffer.new(), (() => {
        t13.write(this.type);
        t13.write("/");
        t13.write(this.subtype);
        return t13;
      })());
      this.parameters[$forEach](dart.fn((attribute, value) => {
        let t13;
        buffer.write("; " + attribute + "=");
        if (scan.nonToken.hasMatch(value)) {
          t13 = buffer;
          (() => {
            t13.write("\"");
            t13.write(value[$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T.MatchToString())));
            t13.write("\"");
            return t13;
          })();
        } else {
          buffer.write(value);
        }
      }, T.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[type$0] = type[$toLowerCase]();
    this[subtype$] = subtype[$toLowerCase]();
    this[parameters$0] = new (T.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T.IdentityMapOfString$String()).new() : new (T.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[37]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  var headers$0 = dart.privateName(bound_multipart_stream, "_MimeMultipart.headers");
  var _stream$ = dart.privateName(bound_multipart_stream, "_stream");
  bound_multipart_stream._MimeMultipart = class _MimeMultipart extends mime_shared.MimeMultipart {
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](headers, _stream) {
      return new bound_multipart_stream._MimeMultipart.new(headers, _stream);
    }
    listen(onData, opts) {
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_stream$].listen(onData, {onDone: onDone, onError: onError, cancelOnError: cancelOnError});
    }
  };
  (bound_multipart_stream._MimeMultipart.new = function(headers, _stream) {
    this[headers$0] = headers;
    this[_stream$] = _stream;
    bound_multipart_stream._MimeMultipart.__proto__.new.call(this);
    ;
  }).prototype = bound_multipart_stream._MimeMultipart.prototype;
  dart.addTypeTests(bound_multipart_stream._MimeMultipart);
  dart.addTypeCaches(bound_multipart_stream._MimeMultipart);
  dart.setMethodSignature(bound_multipart_stream._MimeMultipart, () => ({
    __proto__: dart.getMethods(bound_multipart_stream._MimeMultipart.__proto__),
    listen: dart.fnType(async.StreamSubscription$(core.List$(core.int)), [dart.nullable(dart.fnType(dart.void, [core.List$(core.int)]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(bound_multipart_stream._MimeMultipart, I[38]);
  dart.setFieldSignature(bound_multipart_stream._MimeMultipart, () => ({
    __proto__: dart.getFields(bound_multipart_stream._MimeMultipart.__proto__),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [_stream$]: dart.finalFieldType(async.Stream$(core.List$(core.int)))
  }));
  var _headerField = dart.privateName(bound_multipart_stream, "_headerField");
  var _headerValue = dart.privateName(bound_multipart_stream, "_headerValue");
  var _controllerState = dart.privateName(bound_multipart_stream, "_controllerState");
  var _controller$ = dart.privateName(bound_multipart_stream, "_controller");
  var __BoundMultipartStream__subscription = dart.privateName(bound_multipart_stream, "_#BoundMultipartStream#_subscription");
  var _multipartController = dart.privateName(bound_multipart_stream, "_multipartController");
  var _headers = dart.privateName(bound_multipart_stream, "_headers");
  var _state = dart.privateName(bound_multipart_stream, "_state");
  var _boundaryIndex = dart.privateName(bound_multipart_stream, "_boundaryIndex");
  var _index = dart.privateName(bound_multipart_stream, "_index");
  var _buffer = dart.privateName(bound_multipart_stream, "_buffer");
  var _boundary$ = dart.privateName(bound_multipart_stream, "_boundary");
  var _pauseStream = dart.privateName(bound_multipart_stream, "_pauseStream");
  var _resumeStream = dart.privateName(bound_multipart_stream, "_resumeStream");
  var _tryPropagateControllerState = dart.privateName(bound_multipart_stream, "_tryPropagateControllerState");
  var _subscription = dart.privateName(bound_multipart_stream, "_subscription");
  var _parse = dart.privateName(bound_multipart_stream, "_parse");
  bound_multipart_stream.BoundMultipartStream = class BoundMultipartStream extends core.Object {
    get stream() {
      return this[_controller$].stream;
    }
    get [_subscription]() {
      let t13;
      t13 = this[__BoundMultipartStream__subscription];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_subscription")) : t13;
    }
    set [_subscription](_subscription$35param) {
      this[__BoundMultipartStream__subscription] = _subscription$35param;
    }
    static ['_#new#tearOff'](_boundary, stream) {
      return new bound_multipart_stream.BoundMultipartStream.new(_boundary, stream);
    }
    [_resumeStream]() {
      if (!(this[_controllerState] === 2)) dart.assertFailed(null, I[39], 138, 12, "_controllerState == _controllerStatePaused");
      this[_controllerState] = 1;
      this[_tryPropagateControllerState]();
    }
    [_pauseStream]() {
      this[_controllerState] = 2;
      this[_tryPropagateControllerState]();
    }
    [_tryPropagateControllerState]() {
      if (this[_multipartController] == null) {
        switch (this[_controllerState]) {
          case 1:
            {
              if (this[_subscription].isPaused) this[_subscription].resume();
              break;
            }
          case 2:
            {
              if (!this[_subscription].isPaused) this[_subscription].pause();
              break;
            }
          case 3:
            {
              this[_subscription].cancel();
              break;
            }
          default:
            {
              dart.throw(new core.StateError.new("This code should never be reached."));
            }
        }
      }
    }
    [_parse]() {
      let t13, t13$;
      let boundaryPrefix = this[_boundaryIndex];
      let contentStartIndex = this[_state] === 10 && this[_boundaryIndex] === 0 ? 0 : null;
      const reportData = () => {
        if (dart.nullCheck(contentStartIndex) < 0) {
          let contentLength = boundaryPrefix + this[_index] - this[_boundaryIndex];
          if (contentLength <= boundaryPrefix) {
            dart.nullCheck(this[_multipartController]).add(this[_boundary$][$sublist](0, contentLength));
          } else {
            dart.nullCheck(this[_multipartController]).add(this[_boundary$][$sublist](0, boundaryPrefix));
            dart.nullCheck(this[_multipartController]).add(this[_buffer][$sublist](0, contentLength - boundaryPrefix));
          }
        } else {
          let contentEndIndex = this[_index] - this[_boundaryIndex];
          dart.nullCheck(this[_multipartController]).add(this[_buffer][$sublist](contentStartIndex, contentEndIndex));
        }
      };
      dart.fn(reportData, T.VoidTovoid());
      while (this[_index] < this[_buffer][$length] && this[_state] !== 15 && this[_state] !== 14) {
        let byte = this[_index] < 0 ? this[_boundary$][$_get](boundaryPrefix + this[_index]) : this[_buffer][$_get](this[_index]);
        switch (this[_state]) {
          case 0:
            {
              if (byte === this[_boundary$][$_get](this[_boundaryIndex])) {
                this[_boundaryIndex] = this[_boundaryIndex] + 1;
                if (this[_boundaryIndex] === this[_boundary$][$length]) {
                  this[_state] = 1;
                  this[_boundaryIndex] = 0;
                }
              } else {
                this[_index] = this[_index] - this[_boundaryIndex];
                this[_boundaryIndex] = 0;
              }
              break;
            }
          case 1:
            {
              if (byte === 13) {
                this[_state] = 2;
              } else if (byte === 45) {
                this[_state] = 11;
              } else {
                bound_multipart_stream._expectWhitespace(byte);
              }
              break;
            }
          case 2:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              t13 = this[_multipartController];
              t13 == null ? null : t13.close();
              if (this[_multipartController] != null) {
                this[_multipartController] = null;
                this[_tryPropagateControllerState]();
              }
              this[_state] = 3;
              break;
            }
          case 3:
            {
              this[_headers] = new (T.IdentityMapOfString$String()).new();
              if (byte === 13) {
                this[_state] = 9;
              } else {
                this[_headerField][$add](bound_multipart_stream._toLowerCase(byte));
                this[_state] = 4;
              }
              break;
            }
          case 4:
            {
              if (byte === 58) {
                this[_state] = 5;
              } else {
                if (!bound_multipart_stream._isTokenChar(byte)) {
                  dart.throw(C[44] || CT.C44);
                }
                this[_headerField][$add](bound_multipart_stream._toLowerCase(byte));
              }
              break;
            }
          case 5:
            {
              if (byte === 13) {
                this[_state] = 7;
              } else if (byte !== 32 && byte !== 9) {
                this[_headerValue][$add](byte);
                this[_state] = 6;
              }
              break;
            }
          case 6:
            {
              if (byte === 13) {
                this[_state] = 7;
              } else {
                this[_headerValue][$add](byte);
              }
              break;
            }
          case 7:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              this[_state] = 8;
              break;
            }
          case 8:
            {
              if (byte === 32 || byte === 9) {
                this[_state] = 5;
              } else {
                let headerField = convert.utf8.decode(this[_headerField]);
                let headerValue = convert.utf8.decode(this[_headerValue]);
                dart.nullCheck(this[_headers])[$_set](headerField[$toLowerCase](), headerValue);
                this[_headerField][$clear]();
                this[_headerValue][$clear]();
                if (byte === 13) {
                  this[_state] = 9;
                } else {
                  this[_headerField][$add](bound_multipart_stream._toLowerCase(byte));
                  this[_state] = 4;
                }
              }
              break;
            }
          case 9:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              this[_multipartController] = T.StreamControllerOfListOfint().new({sync: true, onListen: dart.fn(() => {
                  if (this[_subscription].isPaused) this[_subscription].resume();
                }, T.VoidTovoid()), onPause: dart.bind(this[_subscription], 'pause'), onResume: dart.bind(this[_subscription], 'resume')});
              this[_controller$].add(new bound_multipart_stream._MimeMultipart.new(dart.nullCheck(this[_headers]), dart.nullCheck(this[_multipartController]).stream));
              this[_headers] = null;
              this[_state] = 10;
              contentStartIndex = this[_index] + 1;
              break;
            }
          case 10:
            {
              if (byte === this[_boundary$][$_get](this[_boundaryIndex])) {
                this[_boundaryIndex] = this[_boundaryIndex] + 1;
                if (this[_boundaryIndex] === this[_boundary$][$length]) {
                  if (contentStartIndex != null) {
                    this[_index] = this[_index] + 1;
                    reportData();
                    this[_index] = this[_index] - 1;
                  }
                  dart.nullCheck(this[_multipartController]).close();
                  this[_multipartController] = null;
                  this[_tryPropagateControllerState]();
                  this[_boundaryIndex] = 0;
                  this[_state] = 1;
                }
              } else {
                this[_index] = this[_index] - this[_boundaryIndex];
                contentStartIndex == null ? contentStartIndex = this[_index] : null;
                this[_boundaryIndex] = 0;
              }
              break;
            }
          case 11:
            {
              bound_multipart_stream._expectByteValue(byte, 45);
              this[_state] = 12;
              break;
            }
          case 12:
            {
              if (byte === 13) {
                this[_state] = 13;
              } else {
                bound_multipart_stream._expectWhitespace(byte);
              }
              break;
            }
          case 13:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              t13$ = this[_multipartController];
              t13$ == null ? null : t13$.close();
              if (this[_multipartController] != null) {
                this[_multipartController] = null;
                this[_tryPropagateControllerState]();
              }
              this[_state] = 14;
              break;
            }
          default:
            {
              if (!false) dart.assertFailed(null, I[39], 367, 18, "false");
              break;
            }
        }
        this[_index] = this[_index] + 1;
      }
      if (this[_state] === 10 && contentStartIndex != null) {
        reportData();
      }
      if (this[_index] === this[_buffer][$length]) {
        this[_buffer] = bound_multipart_stream._placeholderBuffer;
        this[_index] = 0;
        this[_subscription].resume();
      }
    }
  };
  (bound_multipart_stream.BoundMultipartStream.new = function(_boundary, stream) {
    let t13;
    this[_headerField] = T.JSArrayOfint().of([]);
    this[_headerValue] = T.JSArrayOfint().of([]);
    this[_controllerState] = 0;
    this[_controller$] = T.StreamControllerOfMimeMultipart().new({sync: true});
    this[__BoundMultipartStream__subscription] = null;
    this[_multipartController] = null;
    this[_headers] = null;
    this[_state] = 0;
    this[_boundaryIndex] = 2;
    this[_index] = 0;
    this[_buffer] = bound_multipart_stream._placeholderBuffer;
    this[_boundary$] = _boundary;
    t13 = this[_controller$];
    (() => {
      t13.onPause = dart.bind(this, _pauseStream);
      t13.onResume = dart.bind(this, _resumeStream);
      t13.onCancel = dart.fn(() => {
        this[_controllerState] = 3;
        this[_tryPropagateControllerState]();
      }, T.VoidToNull());
      t13.onListen = dart.fn(() => {
        this[_controllerState] = 1;
        this[_subscription] = stream.listen(dart.fn(data => {
          if (!this[_buffer][$_equals](bound_multipart_stream._placeholderBuffer)) dart.assertFailed(null, I[39], 122, 18, "_buffer == _placeholderBuffer");
          this[_subscription].pause();
          this[_buffer] = data;
          this[_index] = 0;
          this[_parse]();
        }, T.ListOfintTovoid()), {onDone: dart.fn(() => {
            if (this[_state] !== 14) {
              this[_controller$].addError(C[43] || CT.C43);
            }
            this[_controller$].close();
          }, T.VoidTovoid()), onError: dart.bind(this[_controller$], 'addError')});
      }, T.VoidTovoid());
      return t13;
    })();
  }).prototype = bound_multipart_stream.BoundMultipartStream.prototype;
  dart.addTypeTests(bound_multipart_stream.BoundMultipartStream);
  dart.addTypeCaches(bound_multipart_stream.BoundMultipartStream);
  dart.setMethodSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getMethods(bound_multipart_stream.BoundMultipartStream.__proto__),
    [_resumeStream]: dart.fnType(dart.void, []),
    [_pauseStream]: dart.fnType(dart.void, []),
    [_tryPropagateControllerState]: dart.fnType(dart.void, []),
    [_parse]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getGetters(bound_multipart_stream.BoundMultipartStream.__proto__),
    stream: async.Stream$(mime_shared.MimeMultipart),
    [_subscription]: async.StreamSubscription$(dart.void)
  }));
  dart.setSetterSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getSetters(bound_multipart_stream.BoundMultipartStream.__proto__),
    [_subscription]: async.StreamSubscription$(dart.void)
  }));
  dart.setLibraryUri(bound_multipart_stream.BoundMultipartStream, I[38]);
  dart.setFieldSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getFields(bound_multipart_stream.BoundMultipartStream.__proto__),
    [_boundary$]: dart.finalFieldType(core.List$(core.int)),
    [_headerField]: dart.finalFieldType(core.List$(core.int)),
    [_headerValue]: dart.finalFieldType(core.List$(core.int)),
    [_controllerState]: dart.fieldType(core.int),
    [_controller$]: dart.finalFieldType(async.StreamController$(mime_shared.MimeMultipart)),
    [__BoundMultipartStream__subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.void))),
    [_multipartController]: dart.fieldType(dart.nullable(async.StreamController$(core.List$(core.int)))),
    [_headers]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    [_state]: dart.fieldType(core.int),
    [_boundaryIndex]: dart.fieldType(core.int),
    [_index]: dart.fieldType(core.int),
    [_buffer]: dart.fieldType(core.List$(core.int))
  }));
  dart.setStaticFieldSignature(bound_multipart_stream.BoundMultipartStream, () => ['_startCode', '_boundaryEndingCode', '_boundaryEndCode', '_headerStartCode', '_headerFieldCode', '_headerValueStartCode', '_headerValueCode', '_headerValueFoldingOrEndingCode', '_headerValueFoldOrEndCode', '_headerEndingCode', '_contentCode', '_lastBoundaryDash2Code', '_lastBoundaryEndingCode', '_lastBoundaryEndCode', '_doneCode', '_failCode', '_controllerStateIdle', '_controllerStateActive', '_controllerStatePaused', '_controllerStateCanceled']);
  dart.defineLazy(bound_multipart_stream.BoundMultipartStream, {
    /*bound_multipart_stream.BoundMultipartStream._startCode*/get _startCode() {
      return 0;
    },
    /*bound_multipart_stream.BoundMultipartStream._boundaryEndingCode*/get _boundaryEndingCode() {
      return 1;
    },
    /*bound_multipart_stream.BoundMultipartStream._boundaryEndCode*/get _boundaryEndCode() {
      return 2;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerStartCode*/get _headerStartCode() {
      return 3;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerFieldCode*/get _headerFieldCode() {
      return 4;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueStartCode*/get _headerValueStartCode() {
      return 5;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueCode*/get _headerValueCode() {
      return 6;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueFoldingOrEndingCode*/get _headerValueFoldingOrEndingCode() {
      return 7;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueFoldOrEndCode*/get _headerValueFoldOrEndCode() {
      return 8;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerEndingCode*/get _headerEndingCode() {
      return 9;
    },
    /*bound_multipart_stream.BoundMultipartStream._contentCode*/get _contentCode() {
      return 10;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryDash2Code*/get _lastBoundaryDash2Code() {
      return 11;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryEndingCode*/get _lastBoundaryEndingCode() {
      return 12;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryEndCode*/get _lastBoundaryEndCode() {
      return 13;
    },
    /*bound_multipart_stream.BoundMultipartStream._doneCode*/get _doneCode() {
      return 14;
    },
    /*bound_multipart_stream.BoundMultipartStream._failCode*/get _failCode() {
      return 15;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateIdle*/get _controllerStateIdle() {
      return 0;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateActive*/get _controllerStateActive() {
      return 1;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStatePaused*/get _controllerStatePaused() {
      return 2;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateCanceled*/get _controllerStateCanceled() {
      return 3;
    }
  }, false);
  bound_multipart_stream._isTokenChar = function _isTokenChar(byte) {
    return byte > 31 && byte < 128 && !bound_multipart_stream._separators.contains(byte);
  };
  bound_multipart_stream._toLowerCase = function _toLowerCase(byte) {
    return 65 <= byte && byte <= 90 ? byte + 32 : byte;
  };
  bound_multipart_stream._expectByteValue = function _expectByteValue(val1, val2) {
    if (val1 !== val2) {
      dart.throw(C[45] || CT.C45);
    }
  };
  bound_multipart_stream._expectWhitespace = function _expectWhitespace(byte) {
    if (byte !== 32 && byte !== 9) {
      dart.throw(C[46] || CT.C46);
    }
  };
  dart.defineLazy(bound_multipart_stream, {
    /*bound_multipart_stream._separators*/get _separators() {
      return C[47] || CT.C47;
    },
    /*bound_multipart_stream._placeholderBuffer*/get _placeholderBuffer() {
      return C[48] || CT.C48;
    }
  }, false);
  dart.defineLazy(char_code, {
    /*char_code.ht*/get ht() {
      return 9;
    },
    /*char_code.lf*/get lf() {
      return 10;
    },
    /*char_code.cr*/get cr() {
      return 13;
    },
    /*char_code.sp*/get sp() {
      return 32;
    },
    /*char_code.dash*/get dash() {
      return 45;
    },
    /*char_code.colon*/get colon() {
      return 58;
    },
    /*char_code.upperA*/get upperA() {
      return 65;
    },
    /*char_code.upperZ*/get upperZ() {
      return 90;
    },
    /*char_code.lowerA*/get lowerA() {
      return 97;
    }
  }, false);
  dart.defineLazy(default_extension_map, {
    /*default_extension_map.defaultExtensionMap*/get defaultExtensionMap() {
      return C[49] || CT.C49;
    }
  }, false);
  var mimeType$ = dart.privateName(magic_number, "MagicNumber.mimeType");
  var numbers$ = dart.privateName(magic_number, "MagicNumber.numbers");
  var mask$ = dart.privateName(magic_number, "MagicNumber.mask");
  magic_number.MagicNumber = class MagicNumber extends core.Object {
    get mimeType() {
      return this[mimeType$];
    }
    set mimeType(value) {
      super.mimeType = value;
    }
    get numbers() {
      return this[numbers$];
    }
    set numbers(value) {
      super.numbers = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      super.mask = value;
    }
    static ['_#new#tearOff'](mimeType, numbers, opts) {
      let mask = opts && 'mask' in opts ? opts.mask : null;
      return new magic_number.MagicNumber.new(mimeType, numbers, {mask: mask});
    }
    matches(header) {
      if (header[$length] < this.numbers[$length]) return false;
      for (let i = 0; i < this.numbers[$length]; i = i + 1) {
        if (this.mask != null) {
          if ((dart.nullCheck(this.mask)[$_get](i) & this.numbers[$_get](i)) >>> 0 !== (dart.nullCheck(this.mask)[$_get](i) & header[$_get](i)) >>> 0) return false;
        } else {
          if (this.numbers[$_get](i) !== header[$_get](i)) return false;
        }
      }
      return true;
    }
  };
  (magic_number.MagicNumber.new = function(mimeType, numbers, opts) {
    let mask = opts && 'mask' in opts ? opts.mask : null;
    this[mimeType$] = mimeType;
    this[numbers$] = numbers;
    this[mask$] = mask;
    ;
  }).prototype = magic_number.MagicNumber.prototype;
  dart.addTypeTests(magic_number.MagicNumber);
  dart.addTypeCaches(magic_number.MagicNumber);
  dart.setMethodSignature(magic_number.MagicNumber, () => ({
    __proto__: dart.getMethods(magic_number.MagicNumber.__proto__),
    matches: dart.fnType(core.bool, [core.List$(core.int)])
  }));
  dart.setLibraryUri(magic_number.MagicNumber, I[40]);
  dart.setFieldSignature(magic_number.MagicNumber, () => ({
    __proto__: dart.getFields(magic_number.MagicNumber.__proto__),
    mimeType: dart.finalFieldType(core.String),
    numbers: dart.finalFieldType(core.List$(core.int)),
    mask: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  dart.defineLazy(magic_number, {
    /*magic_number.initialMagicNumbersMaxLength*/get initialMagicNumbersMaxLength() {
      return 12;
    },
    /*magic_number.initialMagicNumbers*/get initialMagicNumbers() {
      return C[50] || CT.C50;
    }
  }, false);
  var __XFile__path = dart.privateName(html$, "_#XFile#_path");
  var _browserBlob = dart.privateName(html$, "_browserBlob");
  var __XFile__target = dart.privateName(html$, "_#XFile#_target");
  var _mimeType = dart.privateName(html$, "_mimeType");
  var _length = dart.privateName(html$, "_length");
  var _overrides$ = dart.privateName(html$, "_overrides");
  var _lastModified = dart.privateName(html$, "_lastModified");
  var _name$ = dart.privateName(html$, "_name");
  var _createBlobFromBytes = dart.privateName(html$, "_createBlobFromBytes");
  var _path = dart.privateName(html$, "_path");
  var _target$ = dart.privateName(html$, "_target");
  var _hasTestOverrides = dart.privateName(html$, "_hasTestOverrides");
  var _blob = dart.privateName(html$, "_blob");
  var _blobToByteBuffer = dart.privateName(html$, "_blobToByteBuffer");
  base.XFileBase = class XFileBase extends core.Object {
    saveTo(path) {
      dart.throw(new core.UnimplementedError.new("saveTo has not been implemented."));
    }
    get path() {
      dart.throw(new core.UnimplementedError.new(".path has not been implemented."));
    }
    get name() {
      dart.throw(new core.UnimplementedError.new(".name has not been implemented."));
    }
    get mimeType() {
      dart.throw(new core.UnimplementedError.new(".mimeType has not been implemented."));
    }
    length() {
      dart.throw(new core.UnimplementedError.new(".length() has not been implemented."));
    }
    readAsString(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[21] || CT.C21;
      dart.throw(new core.UnimplementedError.new("readAsString() has not been implemented."));
    }
    readAsBytes() {
      dart.throw(new core.UnimplementedError.new("readAsBytes() has not been implemented."));
    }
    openRead(start = null, end = null) {
      dart.throw(new core.UnimplementedError.new("openRead() has not been implemented."));
    }
    lastModified() {
      dart.throw(new core.UnimplementedError.new("lastModified() has not been implemented."));
    }
  };
  (base.XFileBase.new = function(path) {
    ;
  }).prototype = base.XFileBase.prototype;
  dart.addTypeTests(base.XFileBase);
  dart.addTypeCaches(base.XFileBase);
  dart.setMethodSignature(base.XFileBase, () => ({
    __proto__: dart.getMethods(base.XFileBase.__proto__),
    saveTo: dart.fnType(async.Future$(dart.void), [core.String]),
    length: dart.fnType(async.Future$(core.int), []),
    readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),
    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    openRead: dart.fnType(async.Stream$(typed_data.Uint8List), [], [dart.nullable(core.int), dart.nullable(core.int)]),
    lastModified: dart.fnType(async.Future$(core.DateTime), [])
  }));
  dart.setGetterSignature(base.XFileBase, () => ({
    __proto__: dart.getGetters(base.XFileBase.__proto__),
    path: core.String,
    name: core.String,
    mimeType: dart.nullable(core.String)
  }));
  dart.setLibraryUri(base.XFileBase, I[42]);
  html$.XFile = class XFile extends base.XFileBase {
    static ['_#new#tearOff'](path, opts) {
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let length = opts && 'length' in opts ? opts.length : null;
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;
      let overrides = opts && 'overrides' in opts ? opts.overrides : null;
      return new html$.XFile.new(path, {mimeType: mimeType, name: name, length: length, bytes: bytes, lastModified: lastModified, overrides: overrides});
    }
    static ['_#fromData#tearOff'](bytes, opts) {
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let length = opts && 'length' in opts ? opts.length : null;
      let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let overrides = opts && 'overrides' in opts ? opts.overrides : null;
      return new html$.XFile.fromData(bytes, {mimeType: mimeType, name: name, length: length, lastModified: lastModified, path: path, overrides: overrides});
    }
    [_createBlobFromBytes](bytes, mimeType) {
      return mimeType == null ? html.Blob.new([bytes]) : html.Blob.new([bytes], mimeType);
    }
    get [_path]() {
      let t13;
      t13 = this[__XFile__path];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_path")) : t13;
    }
    set [_path](_path$35param) {
      this[__XFile__path] = _path$35param;
    }
    get [_target$]() {
      let t13;
      t13 = this[__XFile__target];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_target")) : t13;
    }
    set [_target$](_target$35param) {
      this[__XFile__target] = _target$35param;
    }
    get [_hasTestOverrides]() {
      return this[_overrides$] != null;
    }
    get mimeType() {
      return this[_mimeType];
    }
    get name() {
      return this[_name$];
    }
    get path() {
      return this[_path];
    }
    lastModified() {
      return async.async(core.DateTime, (function* lastModified() {
        return this[_lastModified];
      }).bind(this));
    }
    get [_blob]() {
      return async.async(html.Blob, (function* _blob() {
        if (this[_browserBlob] != null) {
          return dart.nullCheck(this[_browserBlob]);
        }
        if (web_helpers.isSafari() && this[_length] != null && dart.nullCheck(this[_length]) >= 4294967296) {
          dart.throw(core.Exception.new("Safari cannot handle XFiles larger than 4GB."));
        }
        let request = null;
        function request$35get() {
          let t14;
          t14 = request;
          return t14 == null ? dart.throw(new _internal.LateError.localNI("request")) : t14;
        }
        function request$35set(request$35param) {
          return request = request$35param;
        }
        try {
          request$35set(yield html.HttpRequest.request(this.path, {responseType: "blob"}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (html.ProgressEvent.is(e)) {
            if (e[$type] === "error") {
              dart.throw(core.Exception.new("Could not load Blob from its URL. Has it been revoked?"));
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
        this[_browserBlob] = T.BlobN().as(request$35get()[$response]);
        if (!(this[_browserBlob] != null)) dart.assertFailed("The Blob backing this XFile cannot be null!", I[41], 147, 12, "_browserBlob != null");
        return dart.nullCheck(this[_browserBlob]);
      }).bind(this));
    }
    readAsBytes() {
      return async.async(typed_data.Uint8List, (function* readAsBytes() {
        return this[_blob].then(typed_data.Uint8List, dart.bind(this, _blobToByteBuffer));
      }).bind(this));
    }
    length() {
      return async.async(core.int, (function* length() {
        let t17;
        t17 = this[_length];
        return t17 == null ? (yield this[_blob])[$size] : t17;
      }).bind(this));
    }
    readAsString(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[21] || CT.C21;
      return async.async(core.String, (function* readAsString() {
        return this.readAsBytes().then(core.String, T.ListOfintToString().as(dart.bind(encoding, 'decode')));
      }).bind(this));
    }
    openRead(start = null, end = null) {
      return new (T._AsyncStarImplOfUint8List()).new((function* openRead(stream) {
        let t17, t17$;
        let blob = (yield this[_blob]);
        let slice = blob[$slice]((t17 = start, t17 == null ? 0 : t17), (t17$ = end, t17$ == null ? blob[$size] : t17$), blob[$type]);
        let convertedSlice = (yield this[_blobToByteBuffer](slice));
        if (stream.add(convertedSlice)) return;
        yield;
      }).bind(this)).stream;
    }
    [_blobToByteBuffer](blob) {
      return async.async(typed_data.Uint8List, function* _blobToByteBuffer() {
        let reader = html.FileReader.new();
        reader.readAsArrayBuffer(blob);
        yield reader[$onLoadEnd].first;
        let result = T.Uint8ListN().as(reader[$result]);
        if (result == null) {
          dart.throw(core.Exception.new("Cannot read bytes from Blob. Is it still available?"));
        }
        return result;
      });
    }
    saveTo(path) {
      return async.async(dart.void, (function* saveTo() {
        let t19, t18, t17;
        this[_target$] = web_helpers.ensureInitialized("__x_file_dom_element");
        let element = this[_hasTestOverrides] ? html.AnchorElement.as((t17 = dart.nullCheck(this[_overrides$]), t18 = this.path, t19 = this.name, t17.createAnchorElement(t18, t19))) : web_helpers.createAnchorElement(this.path, this.name);
        this[_target$][$children][$clear]();
        web_helpers.addElementToContainerAndClick(this[_target$], element);
      }).bind(this));
    }
  };
  (html$.XFile.new = function(path, opts) {
    let t13, t13$;
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let length = opts && 'length' in opts ? opts.length : null;
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;
    let overrides = opts && 'overrides' in opts ? opts.overrides : null;
    this[__XFile__path] = null;
    this[_browserBlob] = null;
    this[__XFile__target] = null;
    this[_mimeType] = mimeType;
    this[__XFile__path] = path;
    this[_length] = length;
    this[_overrides$] = overrides;
    this[_lastModified] = (t13 = lastModified, t13 == null ? new core.DateTime.fromMillisecondsSinceEpoch(0) : t13);
    this[_name$] = (t13$ = name, t13$ == null ? "" : t13$);
    html$.XFile.__proto__.new.call(this, path);
    if (bytes != null) {
      this[_browserBlob] = this[_createBlobFromBytes](bytes, mimeType);
    }
  }).prototype = html$.XFile.prototype;
  (html$.XFile.fromData = function(bytes, opts) {
    let t13, t13$;
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let length = opts && 'length' in opts ? opts.length : null;
    let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let overrides = opts && 'overrides' in opts ? opts.overrides : null;
    this[__XFile__path] = null;
    this[_browserBlob] = null;
    this[__XFile__target] = null;
    this[_mimeType] = mimeType;
    this[_length] = length;
    this[_overrides$] = overrides;
    this[_lastModified] = (t13 = lastModified, t13 == null ? new core.DateTime.fromMillisecondsSinceEpoch(0) : t13);
    this[_name$] = (t13$ = name, t13$ == null ? "" : t13$);
    html$.XFile.__proto__.new.call(this, path);
    if (path == null) {
      this[_browserBlob] = this[_createBlobFromBytes](bytes, mimeType);
      this[_path] = html.Url.createObjectUrl(this[_browserBlob]);
    } else {
      this[_path] = path;
    }
  }).prototype = html$.XFile.prototype;
  dart.addTypeTests(html$.XFile);
  dart.addTypeCaches(html$.XFile);
  dart.setMethodSignature(html$.XFile, () => ({
    __proto__: dart.getMethods(html$.XFile.__proto__),
    [_createBlobFromBytes]: dart.fnType(html.Blob, [typed_data.Uint8List, dart.nullable(core.String)]),
    [_blobToByteBuffer]: dart.fnType(async.Future$(typed_data.Uint8List), [html.Blob])
  }));
  dart.setGetterSignature(html$.XFile, () => ({
    __proto__: dart.getGetters(html$.XFile.__proto__),
    [_path]: core.String,
    [_target$]: html.Element,
    [_hasTestOverrides]: core.bool,
    [_blob]: async.Future$(html.Blob)
  }));
  dart.setSetterSignature(html$.XFile, () => ({
    __proto__: dart.getSetters(html$.XFile.__proto__),
    [_path]: core.String,
    [_target$]: html.Element
  }));
  dart.setLibraryUri(html$.XFile, I[43]);
  dart.setFieldSignature(html$.XFile, () => ({
    __proto__: dart.getFields(html$.XFile.__proto__),
    [_mimeType]: dart.finalFieldType(dart.nullable(core.String)),
    [_name$]: dart.finalFieldType(core.String),
    [__XFile__path]: dart.fieldType(dart.nullable(core.String)),
    [_length]: dart.finalFieldType(dart.nullable(core.int)),
    [_lastModified]: dart.finalFieldType(core.DateTime),
    [_browserBlob]: dart.fieldType(dart.nullable(html.Blob)),
    [__XFile__target]: dart.fieldType(dart.nullable(html.Element)),
    [_overrides$]: dart.finalFieldType(dart.nullable(html$.CrossFileTestOverrides))
  }));
  var createAnchorElement$ = dart.privateName(html$, "CrossFileTestOverrides.createAnchorElement");
  html$.CrossFileTestOverrides = class CrossFileTestOverrides extends core.Object {
    get createAnchorElement() {
      return this[createAnchorElement$];
    }
    set createAnchorElement(value) {
      this[createAnchorElement$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let createAnchorElement = opts && 'createAnchorElement' in opts ? opts.createAnchorElement : null;
      return new html$.CrossFileTestOverrides.new({createAnchorElement: createAnchorElement});
    }
  };
  (html$.CrossFileTestOverrides.new = function(opts) {
    let createAnchorElement = opts && 'createAnchorElement' in opts ? opts.createAnchorElement : null;
    this[createAnchorElement$] = createAnchorElement;
    ;
  }).prototype = html$.CrossFileTestOverrides.prototype;
  dart.addTypeTests(html$.CrossFileTestOverrides);
  dart.addTypeCaches(html$.CrossFileTestOverrides);
  dart.setLibraryUri(html$.CrossFileTestOverrides, I[43]);
  dart.setFieldSignature(html$.CrossFileTestOverrides, () => ({
    __proto__: dart.getFields(html$.CrossFileTestOverrides.__proto__),
    createAnchorElement: dart.fieldType(dart.fnType(html.Element, [core.String, core.String]))
  }));
  dart.defineLazy(html$, {
    /*html$._fourGigabytes*/get _fourGigabytes() {
      return 4294967296;
    }
  }, false);
  var file$0 = dart.privateName(lost_data, "LostData.file");
  var exception$0 = dart.privateName(lost_data, "LostData.exception");
  var type$1 = dart.privateName(lost_data, "LostData.type");
  var _empty$ = dart.privateName(lost_data, "_empty");
  lost_data.LostData = class LostData extends core.Object {
    get file() {
      return this[file$0];
    }
    set file(value) {
      super.file = value;
    }
    get exception() {
      return this[exception$0];
    }
    set exception(value) {
      super.exception = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let file = opts && 'file' in opts ? opts.file : null;
      let exception = opts && 'exception' in opts ? opts.exception : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new lost_data.LostData.new({file: file, exception: exception, type: type});
    }
    static ['_#empty#tearOff']() {
      return new lost_data.LostData.empty();
    }
    get isEmpty() {
      return this[_empty$];
    }
  };
  (lost_data.LostData.new = function(opts) {
    let file = opts && 'file' in opts ? opts.file : null;
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[_empty$] = false;
    this[file$0] = file;
    this[exception$0] = exception;
    this[type$1] = type;
    ;
  }).prototype = lost_data.LostData.prototype;
  (lost_data.LostData.empty = function() {
    this[_empty$] = false;
    this[file$0] = null;
    this[exception$0] = null;
    this[type$1] = null;
    this[_empty$] = true;
    ;
  }).prototype = lost_data.LostData.prototype;
  dart.addTypeTests(lost_data.LostData);
  dart.addTypeCaches(lost_data.LostData);
  dart.setGetterSignature(lost_data.LostData, () => ({
    __proto__: dart.getGetters(lost_data.LostData.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(lost_data.LostData, I[44]);
  dart.setFieldSignature(lost_data.LostData, () => ({
    __proto__: dart.getFields(lost_data.LostData.__proto__),
    file: dart.finalFieldType(dart.nullable(html$0.PickedFile)),
    exception: dart.finalFieldType(dart.nullable(message_codec.PlatformException)),
    type: dart.finalFieldType(dart.nullable(retrieve_type.RetrieveType)),
    [_empty$]: dart.fieldType(core.bool)
  }));
  var path$ = dart.privateName(html$0, "PickedFile.path");
  var _initBytes = dart.privateName(html$0, "PickedFile._initBytes");
  var _initBytes$ = dart.privateName(html$0, "_initBytes");
  var _bytes = dart.privateName(html$0, "_bytes");
  base$.PickedFileBase = class PickedFileBase extends core.Object {
    get path() {
      dart.throw(new core.UnimplementedError.new(".path has not been implemented."));
    }
    readAsString(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[21] || CT.C21;
      dart.throw(new core.UnimplementedError.new("readAsString() has not been implemented."));
    }
    readAsBytes() {
      dart.throw(new core.UnimplementedError.new("readAsBytes() has not been implemented."));
    }
    openRead(start = null, end = null) {
      dart.throw(new core.UnimplementedError.new("openRead() has not been implemented."));
    }
  };
  (base$.PickedFileBase.new = function(path) {
    ;
  }).prototype = base$.PickedFileBase.prototype;
  dart.addTypeTests(base$.PickedFileBase);
  dart.addTypeCaches(base$.PickedFileBase);
  dart.setMethodSignature(base$.PickedFileBase, () => ({
    __proto__: dart.getMethods(base$.PickedFileBase.__proto__),
    readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),
    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    openRead: dart.fnType(async.Stream$(typed_data.Uint8List), [], [dart.nullable(core.int), dart.nullable(core.int)])
  }));
  dart.setGetterSignature(base$.PickedFileBase, () => ({
    __proto__: dart.getGetters(base$.PickedFileBase.__proto__),
    path: core.String
  }));
  dart.setLibraryUri(base$.PickedFileBase, I[45]);
  html$0.PickedFile = class PickedFile extends base$.PickedFileBase {
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get [_initBytes$]() {
      return this[_initBytes];
    }
    set [_initBytes$](value) {
      super[_initBytes$] = value;
    }
    static ['_#new#tearOff'](path, opts) {
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      return new html$0.PickedFile.new(path, {bytes: bytes});
    }
    get [_bytes]() {
      return async.async(typed_data.Uint8List, (function* _bytes() {
        if (this[_initBytes$] != null) {
          return T.FutureOfUint8List().value(new typed_data._UnmodifiableUint8ListView.new(dart.nullCheck(this[_initBytes$])));
        }
        return http.readBytes(core.Uri.parse(this.path));
      }).bind(this));
    }
    readAsString(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[21] || CT.C21;
      return async.async(core.String, (function* readAsString() {
        return encoding.decode(yield this[_bytes]);
      }).bind(this));
    }
    readAsBytes() {
      return async.async(typed_data.Uint8List, (function* readAsBytes() {
        return T.FutureOfUint8List().value(yield this[_bytes]);
      }).bind(this));
    }
    openRead(start = null, end = null) {
      return new (T._AsyncStarImplOfUint8List()).new((function* openRead(stream) {
        let t17, t17$;
        let bytes = (yield this[_bytes]);
        if (stream.add(bytes[$sublist]((t17 = start, t17 == null ? 0 : t17), (t17$ = end, t17$ == null ? bytes[$length] : t17$)))) return;
        yield;
      }).bind(this)).stream;
    }
  };
  (html$0.PickedFile.new = function(path, opts) {
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    this[path$] = path;
    this[_initBytes] = bytes;
    html$0.PickedFile.__proto__.new.call(this, path);
    ;
  }).prototype = html$0.PickedFile.prototype;
  dart.addTypeTests(html$0.PickedFile);
  dart.addTypeCaches(html$0.PickedFile);
  dart.setGetterSignature(html$0.PickedFile, () => ({
    __proto__: dart.getGetters(html$0.PickedFile.__proto__),
    [_bytes]: async.Future$(typed_data.Uint8List)
  }));
  dart.setLibraryUri(html$0.PickedFile, I[46]);
  dart.setFieldSignature(html$0.PickedFile, () => ({
    __proto__: dart.getFields(html$0.PickedFile.__proto__),
    path: dart.finalFieldType(core.String),
    [_initBytes$]: dart.finalFieldType(dart.nullable(typed_data.Uint8List))
  }));
  scan.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
    }
    result[$add](parseElement());
    scanner.scan(scan.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[$add](parseElement());
      scanner.scan(scan.whitespace);
    }
    return result;
  };
  scan.expectQuotedString = function expectQuotedString(scanner, opts) {
    let name = opts && 'name' in opts ? opts.name : "quoted string";
    scanner.expect(scan._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[$substring](1, string.length - 1)[$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T.MatchToString()));
  };
  dart.defineLazy(scan, {
    /*scan.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan._lws.pattern + ")*");
    }
  }, false);
  utils$.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  var _decode = dart.privateName(decoder, "_decode");
  var _state$ = dart.privateName(decoder, "_state");
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T.ListOfint().as(input);
      let sink = new decoder._Sink.new(T.StreamControllerOfListOfint().new());
      let output = sink[_decode](input, 0, input[$length]);
      if (sink[_state$][$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[$length]));
    }
    startChunkedConversion(sink) {
      T.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[47]);
  var ___Sink__size = dart.privateName(decoder, "_#_Sink#_size");
  var _sink$ = dart.privateName(decoder, "_sink");
  var _size = dart.privateName(decoder, "_size");
  var _close = dart.privateName(decoder, "_close");
  var _digitForByte = dart.privateName(decoder, "_digitForByte");
  var _State__name = dart.privateName(decoder, "_State._name");
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [_size]() {
      let t19;
      t19 = this[___Sink__size];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t19;
    }
    set [_size](_size$35param) {
      this[___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      let output = this[_decode](chunk, start, end);
      if (output[$isNotEmpty]) this[_sink$].add(output);
      if (isLast) this[_close](chunk, end);
    }
    close() {
      return this[_close]();
    }
    [_close](chunk = null, index = null) {
      if (!this[_state$][$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[_sink$].close();
    }
    [_decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[_state$]) {
          case C[95] || CT.C95:
            {
              this[_size] = this[_digitForByte](bytes, start);
              this[_state$] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[96] || CT.C96:
            {
              if (bytes[$_get](start) === 13) {
                this[_state$] = decoder._State.sizeBeforeLF;
              } else {
                this[_size] = (this[_size] << 4 >>> 0) + this[_digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[97] || CT.C97:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = this[_size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[98] || CT.C98:
            {
              let chunkEnd = math.min(core.int, end, start + this[_size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[_size] = this[_size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[_size] === 0) this[_state$] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[99] || CT.C99:
            {
              assertCurrentChar(13, "CR");
              this[_state$] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[100] || CT.C100:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[101] || CT.C101:
            {
              assertCurrentChar(13, "CR");
              this[_state$] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[102] || CT.C102:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[103] || CT.C103:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[$asUint8List](0, buffer.length);
    }
    [_digitForByte](bytes, index) {
      let byte = bytes[$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[$toRadixString](16)[$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[_state$] = decoder._State.boundary;
    this[___Sink__size] = null;
    this[_sink$] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [_close]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [_decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [_digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[47]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [_sink$]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [_state$]: dart.fieldType(decoder._State),
    [___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  var _name$0 = dart.privateName(decoder, "_name");
  const _name$1 = _State__name;
  decoder._State = class _State extends core.Object {
    get [_name$0]() {
      return this[_name$1];
    }
    set [_name$0](value) {
      super[_name$0] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[_name$0];
    }
  };
  (decoder._State.__ = function(_name) {
    this[_name$1] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[47]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[95] || CT.C95;
    },
    /*decoder._State.size*/get size() {
      return C[96] || CT.C96;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[97] || CT.C97;
    },
    /*decoder._State.body*/get body() {
      return C[98] || CT.C98;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[99] || CT.C99;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[100] || CT.C100;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[101] || CT.C101;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[102] || CT.C102;
    },
    /*decoder._State.end*/get end() {
      return C[103] || CT.C103;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[104] || CT.C104;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T.ListOfint().as(input);
      return encoder._convert(input, 0, input[$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[48]);
  var _sink$0 = dart.privateName(encoder, "_sink");
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T.ListOfint().as(chunk);
      this[_sink$0].add(encoder._convert(chunk, 0, chunk[$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      this[_sink$0].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[_sink$0].close();
    }
    close() {
      this[_sink$0].add(encoder._doneChunk);
      this[_sink$0].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[_sink$0] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[48]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts) {
    let t19, t19$, t19$0, t19$1;
    let isLast = opts && 'isLast' in opts ? opts.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[48] || CT.C48;
    let size = end - start;
    let sizeInHex = size[$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[$setRange](0, sizeInHex.length, sizeInHex[$codeUnits]);
    let cursor = sizeInHex.length;
    list[$_set]((t19 = cursor, cursor = t19 + 1, t19), 13);
    list[$_set]((t19$ = cursor, cursor = t19$ + 1, t19$), 10);
    list[$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[$_set]((t19$0 = cursor, cursor = t19$0 + 1, t19$0), 13);
    list[$_set]((t19$1 = cursor, cursor = t19$1 + 1, t19$1), 10);
    if (isLast) {
      list[$setRange](list[$length] - footerSize, list[$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[105] || CT.C105;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  web_helpers.createAnchorElement = function createAnchorElement(href, suggestedName) {
    let element = html.AnchorElement.new({href: href});
    if (suggestedName == null) {
      element.download = "download";
    } else {
      element.download = suggestedName;
    }
    return element;
  };
  web_helpers.addElementToContainerAndClick = function addElementToContainerAndClick(container, element) {
    container[$children][$add](element);
    element.click();
  };
  web_helpers.ensureInitialized = function ensureInitialized(id) {
    let t19;
    let target = html.querySelector("#" + id);
    if (target == null) {
      let targetElement = (t19 = html.Element.tag("flt-x-file"), (() => {
        t19[$id] = id;
        return t19;
      })());
      dart.nullCheck(html.querySelector("body"))[$children][$add](targetElement);
      target = targetElement;
    }
    return target;
  };
  web_helpers.isSafari = function isSafari() {
    return html.window[$navigator][$vendor] === "Apple Computer, Inc.";
  };
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$1*/get $1() {
      return 49;
    },
    /*charcodes.$3*/get $3() {
      return 51;
    },
    /*charcodes.$4*/get $4() {
      return 52;
    },
    /*charcodes.$7*/get $7() {
      return 55;
    },
    /*charcodes.$A*/get $A() {
      return 65;
    },
    /*charcodes.$q*/get $q() {
      return 113;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  var _table = dart.privateName(typed_queue, "_TypedQueue._table");
  var _head = dart.privateName(typed_queue, "_TypedQueue._head");
  var _tail = dart.privateName(typed_queue, "_TypedQueue._tail");
  var _table$ = dart.privateName(typed_queue, "_table");
  var _head$ = dart.privateName(typed_queue, "_head");
  var _tail$ = dart.privateName(typed_queue, "_tail");
  var _createBuffer = dart.privateName(typed_queue, "_createBuffer");
  var _createList = dart.privateName(typed_queue, "_createList");
  var _writeToList = dart.privateName(typed_queue, "_writeToList");
  var _growAtCapacity = dart.privateName(typed_queue, "_growAtCapacity");
  var _growTo = dart.privateName(typed_queue, "_growTo");
  var _defaultValue = dart.privateName(typed_queue, "_defaultValue");
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [_table$]() {
        return this[_table];
      }
      set [_table$](value) {
        this[_table] = value;
      }
      get [_head$]() {
        return this[_head];
      }
      set [_head$](value) {
        this[_head] = value;
      }
      get [_tail$]() {
        return this[_tail];
      }
      set [_tail$](value) {
        this[_tail] = value;
      }
      get length() {
        return (this[_tail$] - this[_head$] & this[_table$][$length] - 1) >>> 0;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        let list = growable ? this[_createBuffer](this.length) : this[_createList](this.length);
        this[_writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[_table$][$_set](this[_tail$], value);
        this[_tail$] = (this[_tail$] + 1 & this[_table$][$length] - 1) >>> 0;
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[_head$] = (this[_head$] - 1 & this[_table$][$length] - 1) >>> 0;
        this[_table$][$_set](this[_head$], value);
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      removeFirst() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        let result = this[_table$][$_get](this[_head$]);
        this[_head$] = (this[_head$] + 1 & this[_table$][$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        this[_tail$] = (this[_tail$] - 1 & this[_table$][$length] - 1) >>> 0;
        return this[_table$][$_get](this[_tail$]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[_table$][$length] <= value;
          if (needsToGrow) this[_growTo](value);
          this[_tail$] = (this[_tail$] + delta & this[_table$][$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[_defaultValue]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[_table$][$_get]((this[_head$] + index & this[_table$][$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[_table$][$_set]((this[_head$] + index & this[_table$][$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[_head$] = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[_tail$] = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[_head$] = (this[_head$] + removedElements & this[_table$][$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[_tail$] = (this[_tail$] - removedElements & this[_table$][$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let targetEnd = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[_head$] + skipCount & this[_table$][$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[_table$][$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[_table$][$setRange](targetStart, targetEnd, this[_table$], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[_table$][$length] - startGap;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, this[_table$][$length], this[_table$]);
              this[_table$][$setRange](0, targetEnd, this[_table$], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](0, firstStart, this[_table$], this[_table$][$length] - firstStart);
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
            } else {
              let firstEnd = this[_table$][$length] - sourceStart;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, targetEnd, this[_table$]);
            }
          } else {
            if (sourceIsContiguous) {
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](targetStart, firstStart, this[_table$], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[_table$][$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[_table$][$setRange](targetStart, this[_table$][$length], iterable, skipCount);
          this[_table$][$setRange](0, targetEnd, iterable, skipCount + (this[_table$][$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[_table$][$fillRange](startInTable, endInTable, value);
        } else {
          this[_table$][$fillRange](startInTable, this[_table$][$length], value);
          this[_table$][$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[_createList](nonNullEnd - start);
        this[_writeToList](list, start, nonNullEnd);
        return list;
      }
      [_writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[49], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[49], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[_head$] + dart.notNull(start) & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + dart.notNull(end) & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[$setRange](0, elementsToWrite, this[_table$], startInTable);
        } else {
          let firstPartSize = this[_table$][$length] - startInTable;
          target[$setRange](0, firstPartSize, this[_table$], startInTable);
          target[$setRange](firstPartSize, firstPartSize + endInTable, this[_table$], 0);
        }
        return elementsToWrite;
      }
      [_growAtCapacity]() {
        if (!(this[_head$] === this[_tail$])) dart.assertFailed(null, I[49], 297, 12, "_head == _tail");
        let newTable = this[_createList](this[_table$][$length] * 2);
        let partitionPoint = this[_table$][$length] - this[_head$];
        newTable[$setRange](0, partitionPoint, this[_table$], this[_head$]);
        if (partitionPoint !== this[_table$][$length]) {
          newTable[$setRange](partitionPoint, this[_table$][$length], this[_table$]);
        }
        this[_head$] = 0;
        this[_tail$] = this[_table$][$length];
        this[_table$] = newTable;
      }
      [_growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[49], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[$rightShift](1);
        let newTable = this[_createList](typed_queue._nextPowerOf2(newElementCount));
        this[_tail$] = this[_writeToList](newTable);
        this[_table$] = newTable;
        this[_head$] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[_table] = L.as(table);
      this[_head] = 0;
      this[_tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [_writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [_growAtCapacity]: dart.fnType(dart.void, []),
      [_growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[50]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [_table$]: dart.fieldType(L),
      [_head$]: dart.fieldType(core.int),
      [_tail$]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [_defaultValue]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[50]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [_defaultValue]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[50]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  var _add = dart.privateName(typed_queue, "_add");
  var _add$ = dart.privateName(serialization, "_add");
  var _head$0 = dart.privateName(queue_list, "_head");
  var _writeToList$ = dart.privateName(queue_list, "_writeToList");
  var _grow = dart.privateName(typed_queue, "_grow");
  var _grow$ = dart.privateName(queue_list, "_grow");
  var _preGrow = dart.privateName(typed_queue, "_preGrow");
  var _preGrow$ = dart.privateName(queue_list, "_preGrow");
  var _table$0 = dart.privateName(queue_list, "_table");
  var _tail$0 = dart.privateName(queue_list, "_tail");
  var _head_ = dart.privateName(typed_queue, "_head=");
  var _table_ = dart.privateName(typed_queue, "_table=");
  var _tail_ = dart.privateName(typed_queue, "_tail=");
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Uint8Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[50]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Int8Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[50]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Uint8ClampedQueue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[50]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Uint16Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[50]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Int16Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[50]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Uint32Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[50]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Int32Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[50]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Uint64Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[50]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Int64Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Int64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[50]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Float32Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[50]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Float64Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[50]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Int32x4Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [_defaultValue]: typed_data.Int32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[50]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t19;
      t19 = new typed_queue.Float32x4Queue.new(elements[$length]);
      return (() => {
        t19.addAll(elements);
        return t19;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[106] || CT.C106, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[107] || CT.C107)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[108] || CT.C108, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[109] || CT.C109, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[110] || CT.C110, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[111] || CT.C111)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[112] || CT.C112)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[113] || CT.C113, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[114] || CT.C114, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[115] || CT.C115, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [_defaultValue]: typed_data.Float32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[50]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[49], 691, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  var _buffer$ = dart.privateName(typed_buffer, "_buffer");
  var _length$ = dart.privateName(typed_buffer, "_length");
  var _typedBuffer = dart.privateName(typed_buffer, "_typedBuffer");
  var _defaultValue$ = dart.privateName(typed_buffer, "_defaultValue");
  var _createBuffer$ = dart.privateName(typed_buffer, "_createBuffer");
  var _createBiggerBuffer = dart.privateName(typed_buffer, "_createBiggerBuffer");
  var _grow$0 = dart.privateName(typed_buffer, "_grow");
  var _add$0 = dart.privateName(typed_buffer, "_add");
  var _addAll = dart.privateName(typed_buffer, "_addAll");
  var _insertKnownLength = dart.privateName(typed_buffer, "_insertKnownLength");
  var _ensureCapacity = dart.privateName(typed_buffer, "_ensureCapacity");
  var _setRange = dart.privateName(typed_buffer, "_setRange");
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [_typedBuffer]() {
        return typed_data.TypedData.as(this[_buffer$]);
      }
      get length() {
        return this[_length$];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[_buffer$][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[_buffer$][$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[_length$]) {
          let defaultValue = this[_defaultValue$];
          for (let i = newLength; i < this[_length$]; i = i + 1) {
            this[_buffer$][$_set](i, defaultValue);
          }
        } else if (newLength > this[_buffer$][$length]) {
          let newBuffer = null;
          if (this[_buffer$][$isEmpty]) {
            newBuffer = this[_createBuffer$](newLength);
          } else {
            newBuffer = this[_createBiggerBuffer](newLength);
          }
          newBuffer[$setRange](0, this[_length$], this[_buffer$]);
          this[_buffer$] = newBuffer;
        }
        this[_length$] = newLength;
      }
      [_add$0](value) {
        let t19;
        if (this[_length$] === this[_buffer$][$length]) this[_grow$0](this[_length$]);
        this[_buffer$][$_set]((t19 = this[_length$], this[_length$] = t19 + 1, t19), value);
      }
      add(element) {
        E.as(element);
        this[_add$0](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[_addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t19;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[_length$] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[_length$]) {
          this[_addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[$length];
        }
        if (end != null) {
          this[_insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[_length$];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[_buffer$][$length]) {
            this[_grow$0](writeIndex);
          }
          this[_buffer$][$_set]((t19 = writeIndex, writeIndex = t19 + 1, t19), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[_buffer$], index, this[_length$]);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer$], this[_length$], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer$], index, writeIndex);
        this[_length$] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[$_get](start);
          let last = buffer[$_get](end);
          buffer[$_set](end, first);
          buffer[$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [_addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[$length] : null;
        if (end != null) {
          this[_insertKnownLength](this[_length$], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [_insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[$length] || end > values[$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[_length$] + valuesLength;
        this[_ensureCapacity](newLength);
        this[_buffer$][$setRange](index + valuesLength, this[_length$] + valuesLength, this[_buffer$], index);
        this[_buffer$][$setRange](index, index + valuesLength, values, start);
        this[_length$] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[_length$]) {
          dart.throw(new core.RangeError.range(index, 0, this[_length$]));
        }
        if (this[_length$] < this[_buffer$][$length]) {
          this[_buffer$][$setRange](index + 1, this[_length$] + 1, this[_buffer$], index);
          this[_buffer$][$_set](index, element);
          this[_length$] = this[_length$] + 1;
          return;
        }
        let newBuffer = this[_createBiggerBuffer](null);
        newBuffer[$setRange](0, index, this[_buffer$]);
        newBuffer[$setRange](index + 1, this[_length$] + 1, this[_buffer$], index);
        newBuffer[$_set](index, element);
        this[_length$] = this[_length$] + 1;
        this[_buffer$] = newBuffer;
      }
      [_ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[_buffer$][$length]) return;
        let newBuffer = this[_createBiggerBuffer](requiredCapacity);
        newBuffer[$setRange](0, this[_length$], this[_buffer$]);
        this[_buffer$] = newBuffer;
      }
      [_createBiggerBuffer](requiredCapacity) {
        let newLength = this[_buffer$][$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[_createBuffer$](newLength);
      }
      [_grow$0](length) {
        let t19;
        this[_buffer$] = (t19 = this[_createBiggerBuffer](null), (() => {
          t19[$setRange](0, length, this[_buffer$]);
          return t19;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[_length$]) dart.throw(new core.RangeError.range(end, 0, this[_length$]));
        this[_setRange](start, end, iterable, skipCount);
      }
      [_setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[_buffer$][$setRange](start, end, source[_buffer$], skipCount);
        } else {
          this[_buffer$][$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[_typedBuffer][$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[_length$] * this[_typedBuffer][$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[_typedBuffer][$offsetInBytes];
      }
      get buffer() {
        return this[_typedBuffer][$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[_buffer$] = buffer;
      this[_length$] = buffer[$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [_add$0]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [_addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [_insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [_ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [_createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [_grow$0]: dart.fnType(dart.void, [core.int]),
      [_setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [_typedBuffer]: typed_data.TypedData,
      length: core.int,
      [$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[51]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [_buffer$]: dart.fieldType(core.List$(E)),
      [_length$]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [_defaultValue$]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[51]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [_defaultValue$]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[51]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[51]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[51]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[51]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[51]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[51]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[51]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[51]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[51]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[51]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[51]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[51]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[51]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[51]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:image_picker/image_picker.dart": image_picker,
    "package:http/http.dart": http,
    "package:image_picker_for_web/image_picker_for_web.dart": image_picker_for_web,
    "package:image_picker_platform_interface/image_picker_platform_interface.dart": image_picker_platform_interface,
    "package:http/src/client.dart": client$,
    "package:http/src/exception.dart": exception,
    "package:http/src/request.dart": request$,
    "package:http/src/response.dart": response$,
    "package:http/src/streamed_request.dart": streamed_request,
    "package:http/src/base_client.dart": base_client,
    "package:http/src/base_request.dart": base_request,
    "package:http/src/base_response.dart": base_response,
    "package:http/src/byte_stream.dart": byte_stream,
    "package:http/src/multipart_file.dart": multipart_file,
    "package:http/src/multipart_request.dart": multipart_request,
    "package:http/src/streamed_response.dart": streamed_response,
    "package:mime/mime.dart": mime,
    "package:image_picker_for_web/src/image_resizer.dart": image_resizer,
    "package:cross_file/cross_file.dart": cross_file,
    "package:image_picker_platform_interface/src/platform_interface/image_picker_platform.dart": image_picker_platform,
    "package:image_picker_platform_interface/src/types/types.dart": types,
    "package:http/src/browser_client.dart": browser_client,
    "package:http_parser/http_parser.dart": http_parser,
    "package:http/src/utils.dart": utils,
    "package:http/src/multipart_file_stub.dart": multipart_file_stub,
    "package:http/src/boundary_characters.dart": boundary_characters,
    "package:mime/src/mime_multipart_transformer.dart": mime_multipart_transformer,
    "package:mime/src/mime_shared.dart": mime_shared,
    "package:mime/src/mime_type.dart": mime_type,
    "package:image_picker_for_web/src/image_resizer_utils.dart": image_resizer_utils,
    "package:cross_file/src/x_file.dart": x_file,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:image_picker_platform_interface/src/method_channel/method_channel_image_picker.dart": method_channel_image_picker,
    "package:image_picker_platform_interface/src/types/camera_delegate.dart": camera_delegate,
    "package:image_picker_platform_interface/src/types/camera_device.dart": camera_device,
    "package:image_picker_platform_interface/src/types/image_options.dart": image_options,
    "package:image_picker_platform_interface/src/types/image_source.dart": image_source,
    "package:image_picker_platform_interface/src/types/lost_data_response.dart": lost_data_response,
    "package:image_picker_platform_interface/src/types/media_options.dart": media_options,
    "package:image_picker_platform_interface/src/types/media_selection_type.dart": media_selection_type,
    "package:image_picker_platform_interface/src/types/multi_image_picker_options.dart": multi_image_picker_options,
    "package:image_picker_platform_interface/src/types/picked_file/picked_file.dart": picked_file,
    "package:image_picker_platform_interface/src/types/retrieve_type.dart": retrieve_type,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:mime/src/bound_multipart_stream.dart": bound_multipart_stream,
    "package:mime/src/char_code.dart": char_code,
    "package:mime/src/default_extension_map.dart": default_extension_map,
    "package:mime/src/magic_number.dart": magic_number,
    "package:cross_file/src/types/html.dart": html$,
    "package:image_picker_platform_interface/src/types/picked_file/lost_data.dart": lost_data,
    "package:image_picker_platform_interface/src/types/picked_file/html.dart": html$0,
    "package:http_parser/src/scan.dart": scan,
    "package:http_parser/src/utils.dart": utils$,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:cross_file/src/web_helpers/web_helpers.dart": web_helpers,
    "package:cross_file/src/types/base.dart": base,
    "package:image_picker_platform_interface/src/types/picked_file/base.dart": base$,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:typed_data/src/typed_buffer.dart": typed_buffer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker-0.8.9/lib/image_picker.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/http.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/platform_interface/image_picker_platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_for_web-2.2.0/lib/image_picker_for_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/byte_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_for_web-2.2.0/lib/src/image_resizer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/browser_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/boundary_characters.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_shared.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_multipart_transformer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_for_web-2.2.0/lib/src/image_resizer_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/method_channel/method_channel_image_picker.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/camera_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/camera_device.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/image_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/image_source.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/lost_data_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/media_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/media_selection_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/multi_image_picker_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/retrieve_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/bound_multipart_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/char_code.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/default_extension_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/magic_number.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cross_file-0.3.3+6/lib/src/types/base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cross_file-0.3.3+6/lib/src/types/html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/picked_file/lost_data.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/picked_file/base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/image_picker_platform_interface-2.9.1/lib/src/types/picked_file/html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cross_file-0.3.3+6/lib/src/web_helpers/web_helpers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_buffer.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    image_picker: image_picker,
    http: http,
    image_picker_for_web: image_picker_for_web,
    image_picker_platform_interface: image_picker_platform_interface,
    src__client: client$,
    src__exception: exception,
    src__request: request$,
    src__response: response$,
    src__streamed_request: streamed_request,
    src__base_client: base_client,
    src__base_request: base_request,
    src__base_response: base_response,
    src__byte_stream: byte_stream,
    src__multipart_file: multipart_file,
    src__multipart_request: multipart_request,
    src__streamed_response: streamed_response,
    mime: mime,
    src__image_resizer: image_resizer,
    cross_file: cross_file,
    src__platform_interface__image_picker_platform: image_picker_platform,
    src__types__types: types,
    src__browser_client: browser_client,
    http_parser: http_parser,
    src__utils: utils,
    src__multipart_file_stub: multipart_file_stub,
    src__boundary_characters: boundary_characters,
    src__mime_multipart_transformer: mime_multipart_transformer,
    src__mime_shared: mime_shared,
    src__mime_type: mime_type,
    src__image_resizer_utils: image_resizer_utils,
    src__x_file: x_file,
    plugin_platform_interface: plugin_platform_interface,
    src__method_channel__method_channel_image_picker: method_channel_image_picker,
    src__types__camera_delegate: camera_delegate,
    src__types__camera_device: camera_device,
    src__types__image_options: image_options,
    src__types__image_source: image_source,
    src__types__lost_data_response: lost_data_response,
    src__types__media_options: media_options,
    src__types__media_selection_type: media_selection_type,
    src__types__multi_image_picker_options: multi_image_picker_options,
    src__types__picked_file__picked_file: picked_file,
    src__types__retrieve_type: retrieve_type,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    src__bound_multipart_stream: bound_multipart_stream,
    src__char_code: char_code,
    src__default_extension_map: default_extension_map,
    src__magic_number: magic_number,
    src__types__html: html$,
    src__types__picked_file__lost_data: lost_data,
    src__types__picked_file__html: html$0,
    src__scan: scan,
    src__utils: utils$,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    src__web_helpers__web_helpers: web_helpers,
    src__types__base: base,
    src__types__picked_file__base: base$,
    typed_data: typed_data$,
    src__chunked_coding__charcodes: charcodes,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__typed_buffer: typed_buffer
  };
}));

//# sourceMappingURL=main.js.map
